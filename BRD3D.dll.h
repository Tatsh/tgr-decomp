/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'BRD3D.dll'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _RTL_CRITICAL_SECTION_DEBUG;
struct _GUID;
union _LARGE_INTEGER;
struct HTASK__;
struct HMMIO__;
struct HWND__;
struct tagWNDCLASSA;
struct HINSTANCE__;
struct HICON__;
struct HBRUSH__;
struct _iobuf;
struct tagMCI_PLAY_PARMS;
struct IDispatch;
struct ITypeInfo;
struct ITypeInfoVtbl;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct ITypeComp;
struct ITypeCompVtbl;
union tagBINDPTR;
struct tagFUNCDESC;
struct tagELEMDESC;
struct tagPARAMDESCEX;
struct tagVARIANT;
struct IUnknown;
struct IUnknownVtbl;
struct tagSAFEARRAY;
struct tagDEC;
struct IRecordInfo;
struct IRecordInfoVtbl;
struct tagVARDESC;
struct tagDISPPARAMS;
struct tagEXCEPINFO;
struct ITypeLib;
struct ITypeLibVtbl;
struct tagTLIBATTR;
struct IDirectDraw;
struct IDirectDrawClipper;
struct IDirectDrawClipperVtbl;
struct _RGNDATA;
struct tagPALETTEENTRY;
struct IDirectDrawPalette;
struct IDirectDrawPaletteVtbl;
struct _DDSURFACEDESC;
struct IDirectDrawSurface;
struct IDirectDrawSurfaceVtbl;
struct _DDBLTFX;
struct _DDBLTBATCH;
struct HDC__;
struct _DDOVERLAYFX;
struct _DDCAPS_DX7;
struct IDirectDraw2;
struct IDirectDraw4;
struct _DDSURFACEDESC2;
struct IDirectDrawSurface4;
struct IDirectDrawSurface4Vtbl;
struct tagDDDEVICEIDENTIFIER;
struct IDirectDrawSurface2;
struct IDirectDrawSurface3;
struct IDirectDrawColorControl;
struct _DDCOLORCONTROL;
struct IDirectDrawGammaControl;
struct _DDGAMMARAMP;
struct IDDVideoPortContainer;
struct _DDVIDEOPORTDESC;
struct _DDVIDEOPORTCONNECT;
struct IDirectDrawVideoPort;
struct IDirectDrawVideoPortVtbl;
struct _DDVIDEOPORTBANDWIDTH;
struct _DDVIDEOPORTINFO;
struct _DDVIDEOPORTCAPS;
struct _DDVIDEOPORTSTATUS;
struct IDirectDrawKernel;
struct _DDKERNELCAPS;
struct IDirectDrawSurfaceKernel;
struct IDirectInputA;
struct IDirectInputDeviceA;
struct IDirectInputDeviceAVtbl;
struct DIDEVCAPS;
struct DIDEVICEOBJECTINSTANCEA;
struct DIPROPHEADER;
struct DIDEVICEOBJECTDATA;
struct _DIDATAFORMAT;
struct _DIOBJECTDATAFORMAT;
struct DIDEVICEINSTANCEA;
struct IDirectInputW;
struct IDirectInputDeviceW;
struct IDirectInputDeviceWVtbl;
struct DIDEVICEOBJECTINSTANCEW;
struct DIDEVICEINSTANCEW;
struct IDirectInput2A;
struct IDirectInput2W;
struct IDirectInputDevice2A;
struct DIEFFECT;
struct DIENVELOPE;
struct IDirectInputEffect;
struct IDirectInputEffectVtbl;
struct DIEFFESCAPE;
struct DIEFFECTINFOA;
struct IDirectInputDevice2W;
struct DIEFFECTINFOW;
struct IDirectSound;
struct _DSBUFFERDESC;
struct tWAVEFORMATEX;
struct IDirectSoundBuffer;
struct IDirectSoundBufferVtbl;
struct _DSBCAPS;
struct _DSCAPS;
struct IDirectSound3DListener;
struct _DS3DLISTENER;
struct _D3DVECTOR;
struct IDirectSound3DBuffer;
struct _DS3DBUFFER;
struct IDirectSoundCapture;
struct _DSCBUFFERDESC;
struct _DSCEFFECTDESC;
struct IDirectSoundCaptureBuffer;
struct IDirectSoundCaptureBufferVtbl;
struct _DSCBCAPS;
struct _DSCCAPS;
struct IDirectSoundNotify;
struct _DSBPOSITIONNOTIFY;
struct IKsPropertySet;
struct IReferenceClock;
struct IKsControl;
struct $117E3A994AEBF040E18388CACE709509;
struct IDirectMusicBuffer;
struct IDirectMusicPortDownload;
struct IDirectMusicDownload;
struct IDirectMusicDownloadVtbl;
struct IDirectMusicCollection;
struct IDirectMusicInstrument;
struct IDirectMusicInstrumentVtbl;
struct IDirectMusicDownloadedInstrument;
struct IDirect3D2;
struct _D3DDeviceDesc;
struct gameSpecificUnk1;
struct IDirect3DDevice2;
struct IDirect3DDevice2Vtbl;
struct IDirect3DViewport2;
struct IDirect3DViewport2Vtbl;
struct unk0;
struct _D3DRECT;
struct IDirectPlayLobby3AVtbl;
struct DPLCONNECTION;
struct tagDPSESSIONDESC2;
struct IDirectPlay4A;
struct tagDPNAME;
struct IDirect3DTexture;
struct IDirect3DTexture2Vtbl;
struct _D3DCLIPSTATUS;

/* 1 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 2 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 146 */
typedef void *PVOID;

/* 8 */
typedef unsigned int DWORD;

/* 3 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 4 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 5 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 6 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 10 */
typedef unsigned int ULONG_PTR;

/* 9 */
typedef ULONG_PTR SIZE_T;

/* 7 */
struct _MEMORYSTATUS
{
  DWORD dwLength;
  DWORD dwMemoryLoad;
  SIZE_T dwTotalPhys;
  SIZE_T dwAvailPhys;
  SIZE_T dwTotalPageFile;
  SIZE_T dwAvailPageFile;
  SIZE_T dwTotalVirtual;
  SIZE_T dwAvailVirtual;
};

/* 12 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 17 */
typedef int LONG;

/* 18 */
typedef void *HANDLE;

/* 11 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 14 */
typedef unsigned __int16 WORD;

/* 16 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 15 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 13 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 20 */
typedef char CHAR;

/* 19 */
struct _OSVERSIONINFOA
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
};

/* 22 */
typedef _GUID GUID;

/* 21 */
typedef GUID IID;

/* 23 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 24 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 26 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 27 */
typedef __int64 LONGLONG;

/* 25 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 29 */
typedef DWORD FOURCC;

/* 28 */
#pragma pack(push, 1)
struct _MMCKINFO
{
  FOURCC ckid;
  DWORD cksize;
  FOURCC fccType;
  DWORD dwDataOffset;
  DWORD dwFlags;
};
#pragma pack(pop)

/* 36 */
typedef int LONG_PTR;

/* 37 */
typedef LONG_PTR LRESULT;

/* 33 */
typedef CHAR *LPSTR;

/* 34 */
typedef unsigned int UINT;

/* 35 */
typedef LONG_PTR LPARAM;

/* 32 */
typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

/* 31 */
typedef MMIOPROC *LPMMIOPROC;

/* 38 */
typedef HTASK__ *HTASK;

/* 40 */
typedef char *HPSTR;

/* 41 */
typedef HMMIO__ *HMMIO;

/* 30 */
#pragma pack(push, 1)
struct _MMIOINFO
{
  DWORD dwFlags;
  FOURCC fccIOProc;
  LPMMIOPROC pIOProc;
  UINT wErrorRet;
  HTASK htask;
  LONG cchBuffer;
  HPSTR pchBuffer;
  HPSTR pchNext;
  HPSTR pchEndRead;
  HPSTR pchEndWrite;
  LONG lBufOffset;
  LONG lDiskOffset;
  DWORD adwInfo[3];
  DWORD dwReserved1;
  DWORD dwReserved2;
  HMMIO hmmio;
};
#pragma pack(pop)

/* 39 */
struct HTASK__
{
  int unused;
};

/* 42 */
#pragma pack(push, 1)
struct HMMIO__
{
  int unused;
};
#pragma pack(pop)

/* 44 */
typedef HWND__ *HWND;

/* 47 */
typedef unsigned int UINT_PTR;

/* 46 */
typedef UINT_PTR WPARAM;

/* 49 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 48 */
typedef tagPOINT POINT;

/* 43 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 45 */
struct HWND__
{
  int unused;
};

/* 50 */
typedef tagWNDCLASSA WNDCLASSA;

/* 52 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 53 */
typedef HINSTANCE__ *HINSTANCE;

/* 55 */
typedef HICON__ *HICON;

/* 57 */
typedef HICON HCURSOR;

/* 58 */
typedef HBRUSH__ *HBRUSH;

/* 60 */
typedef const CHAR *LPCSTR;

/* 51 */
struct tagWNDCLASSA
{
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
};

/* 54 */
struct HINSTANCE__
{
  int unused;
};

/* 56 */
struct HICON__
{
  int unused;
};

/* 59 */
struct HBRUSH__
{
  int unused;
};

/* 61 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 64 */
typedef unsigned __int8 BYTE;

/* 63 */
typedef BYTE *LPBYTE;

/* 62 */
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 65 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 67 */
typedef void *LPVOID;

/* 68 */
typedef int BOOL;

/* 66 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 71 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 70 */
typedef _FILETIME FILETIME;

/* 69 */
struct _WIN32_FIND_DATAA
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  CHAR cFileName[260];
  CHAR cAlternateFileName[14];
};

/* 72 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 75 */
typedef unsigned __int16 wchar_t;

/* 74 */
typedef wchar_t WCHAR;

/* 76 */
typedef _SYSTEMTIME SYSTEMTIME;

/* 73 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 77 */
typedef _iobuf FILE;

/* 78 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 79 */
struct FuncInfoV1
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
};

/* 80 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 81 */
struct Iostream_init;

/* 82 */
typedef tagMCI_PLAY_PARMS MCI_PLAY_PARMS;

/* 84 */
typedef ULONG_PTR DWORD_PTR;

/* 83 */
#pragma pack(push, 1)
struct tagMCI_PLAY_PARMS
{
  DWORD_PTR dwCallback;
  DWORD dwFrom;
  DWORD dwTo;
};
#pragma pack(pop)

/* 87 */
typedef int HRESULT;

/* 88 */
typedef unsigned int ULONG;

/* 89 */
typedef DWORD LCID;

/* 97 */
typedef WCHAR OLECHAR;

/* 96 */
typedef OLECHAR *LPOLESTR;

/* 95 */
typedef LONG DISPID;

/* 170 */
typedef tagDISPPARAMS DISPPARAMS;

/* 128 */
typedef tagVARIANT VARIANT;

/* 172 */
typedef tagEXCEPINFO EXCEPINFO;

/* 85 */
#pragma pack(push, 8)
struct IDispatchVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDispatch *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IDispatch *This);
  ULONG (__stdcall *Release)(IDispatch *This);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
  HRESULT (__stdcall *Invoke)(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
};
#pragma pack(pop)

/* 86 */
#pragma pack(push, 8)
struct IDispatch
{
  IDispatchVtbl *lpVtbl;
};
#pragma pack(pop)

/* 90 */
#pragma pack(push, 8)
struct ITypeInfo
{
  ITypeInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 127 */
typedef VARIANT VARIANTARG;

/* 171 */
#pragma pack(push, 8)
struct tagDISPPARAMS
{
  VARIANTARG *rgvarg;
  DISPID *rgdispidNamedArgs;
  UINT cArgs;
  UINT cNamedArgs;
};
#pragma pack(pop)

/* 108 */
typedef unsigned __int16 VARTYPE;

/* 133 */
typedef __int16 SHORT;

/* 134 */
typedef float FLOAT;

/* 135 */
typedef double DOUBLE;

/* 136 */
typedef __int16 VARIANT_BOOL;

/* 119 */
typedef LONG SCODE;

/* 139 */
struct tagCY::$3EA7BC8C29B528C7CA1203FC489E132F
{
  ULONG Lo;
  LONG Hi;
};

/* 138 */
union tagCY
{
  struct
  {
    ULONG Lo;
    LONG Hi;
  };
  LONGLONG int64;
};

/* 137 */
typedef tagCY CY;

/* 140 */
typedef double DATE;

/* 141 */
typedef OLECHAR *BSTR;

/* 144 */
typedef tagSAFEARRAY SAFEARRAY;

/* 104 */
typedef unsigned __int16 USHORT;

/* 147 */
typedef unsigned __int64 ULONGLONG;

/* 148 */
typedef int INT;

/* 149 */
typedef tagDEC DECIMAL;

/* 155 */
#pragma pack(push, 8)
struct tagVARIANT::$::$::$E09503A454170B491AC1C4312CE36FE6::$0FDBD249F1AECD6A49409B6B82281578
{
  PVOID pvRecord;
  IRecordInfo *pRecInfo;
};
#pragma pack(pop)

/* 132 */
#pragma pack(push, 8)
union tagVARIANT::$::$65D68C826D16CA47CF95571D7BFCD657::$E09503A454170B491AC1C4312CE36FE6
{
  LONGLONG llVal;
  LONG lVal;
  BYTE bVal;
  SHORT iVal;
  FLOAT fltVal;
  DOUBLE dblVal;
  VARIANT_BOOL boolVal;
  SCODE scode;
  CY cyVal;
  DATE date;
  BSTR bstrVal;
  IUnknown *punkVal;
  IDispatch *pdispVal;
  SAFEARRAY *parray;
  BYTE *pbVal;
  SHORT *piVal;
  LONG *plVal;
  LONGLONG *pllVal;
  FLOAT *pfltVal;
  DOUBLE *pdblVal;
  VARIANT_BOOL *pboolVal;
  SCODE *pscode;
  CY *pcyVal;
  DATE *pdate;
  BSTR *pbstrVal;
  IUnknown **ppunkVal;
  IDispatch **ppdispVal;
  SAFEARRAY **pparray;
  VARIANT *pvarVal;
  PVOID byref;
  CHAR cVal;
  USHORT uiVal;
  ULONG ulVal;
  ULONGLONG ullVal;
  INT intVal;
  UINT uintVal;
  DECIMAL *pdecVal;
  CHAR *pcVal;
  USHORT *puiVal;
  ULONG *pulVal;
  ULONGLONG *pullVal;
  INT *pintVal;
  UINT *puintVal;
  #pragma pack(push, 8)
  struct
  {
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 131 */
#pragma pack(push, 8)
struct tagVARIANT::$E93DC971A089CC95F6C875332324C1E7::$65D68C826D16CA47CF95571D7BFCD657
{
  VARTYPE vt;
  WORD wReserved1;
  WORD wReserved2;
  WORD wReserved3;
  #pragma pack(push, 8)
  union
  {
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    #pragma pack(push, 8)
    struct
    {
      PVOID pvRecord;
      IRecordInfo *pRecInfo;
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 152 */
struct tagDEC::$64EC678C49E7BE49873AFBFB7A849D34::$7F8459940C2B08BD5D82B0F27239141B
{
  BYTE scale;
  BYTE sign;
};

/* 151 */
union tagDEC::$64EC678C49E7BE49873AFBFB7A849D34
{
  struct
  {
    BYTE scale;
    BYTE sign;
  };
  USHORT signscale;
};

/* 154 */
struct tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301::$674876891A86A76F12C10005982BCA56
{
  ULONG Lo32;
  ULONG Mid32;
};

/* 153 */
union tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301
{
  struct
  {
    ULONG Lo32;
    ULONG Mid32;
  };
  ULONGLONG Lo64;
};

/* 150 */
struct tagDEC
{
  USHORT wReserved;
  union
  {
    struct
    {
      BYTE scale;
      BYTE sign;
    };
    USHORT signscale;
  };
  ULONG Hi32;
  union
  {
    struct
    {
      ULONG Lo32;
      ULONG Mid32;
    };
    ULONGLONG Lo64;
  };
};

/* 130 */
#pragma pack(push, 8)
union tagVARIANT::$E93DC971A089CC95F6C875332324C1E7
{
  #pragma pack(push, 8)
  struct
  {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    #pragma pack(push, 8)
    union
    {
      LONGLONG llVal;
      LONG lVal;
      BYTE bVal;
      SHORT iVal;
      FLOAT fltVal;
      DOUBLE dblVal;
      VARIANT_BOOL boolVal;
      SCODE scode;
      CY cyVal;
      DATE date;
      BSTR bstrVal;
      IUnknown *punkVal;
      IDispatch *pdispVal;
      SAFEARRAY *parray;
      BYTE *pbVal;
      SHORT *piVal;
      LONG *plVal;
      LONGLONG *pllVal;
      FLOAT *pfltVal;
      DOUBLE *pdblVal;
      VARIANT_BOOL *pboolVal;
      SCODE *pscode;
      CY *pcyVal;
      DATE *pdate;
      BSTR *pbstrVal;
      IUnknown **ppunkVal;
      IDispatch **ppdispVal;
      SAFEARRAY **pparray;
      VARIANT *pvarVal;
      PVOID byref;
      CHAR cVal;
      USHORT uiVal;
      ULONG ulVal;
      ULONGLONG ullVal;
      INT intVal;
      UINT uintVal;
      DECIMAL *pdecVal;
      CHAR *pcVal;
      USHORT *puiVal;
      ULONG *pulVal;
      ULONGLONG *pullVal;
      INT *pintVal;
      UINT *puintVal;
      #pragma pack(push, 8)
      struct
      {
        PVOID pvRecord;
        IRecordInfo *pRecInfo;
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
  DECIMAL decVal;
};
#pragma pack(pop)

/* 129 */
#pragma pack(push, 8)
struct tagVARIANT
{
  #pragma pack(push, 8)
  union
  {
    #pragma pack(push, 8)
    struct
    {
      VARTYPE vt;
      WORD wReserved1;
      WORD wReserved2;
      WORD wReserved3;
      #pragma pack(push, 8)
      union
      {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        BSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        SAFEARRAY *parray;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        SAFEARRAY **pparray;
        VARIANT *pvarVal;
        PVOID byref;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;
        #pragma pack(push, 8)
        struct
        {
          PVOID pvRecord;
          IRecordInfo *pRecInfo;
        };
        #pragma pack(pop)
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
    DECIMAL decVal;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 173 */
#pragma pack(push, 8)
struct tagEXCEPINFO
{
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  SCODE scode;
};
#pragma pack(pop)

/* 92 */
typedef tagTYPEATTR TYPEATTR;

/* 117 */
typedef tagFUNCDESC FUNCDESC;

/* 165 */
typedef tagVARDESC VARDESC;

/* 94 */
typedef DISPID MEMBERID;

/* 107 */
typedef DWORD HREFTYPE;

/* 162 */
enum tagINVOKEKIND
{
  INVOKE_FUNC = 0x1,
  INVOKE_PROPERTYGET = 0x2,
  INVOKE_PROPERTYPUT = 0x4,
  INVOKE_PROPERTYPUTREF = 0x8,
};

/* 161 */
typedef tagINVOKEKIND INVOKEKIND;

/* 91 */
#pragma pack(push, 8)
struct ITypeInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeInfo *This);
  ULONG (__stdcall *Release)(ITypeInfo *This);
  HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);
  HRESULT (__stdcall *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);
  HRESULT (__stdcall *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
  HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);
  HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);
  HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
  HRESULT (__stdcall *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
  HRESULT (__stdcall *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
  HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
  HRESULT (__stdcall *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj);
  HRESULT (__stdcall *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);
  HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
  void (__stdcall *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);
  void (__stdcall *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);
  void (__stdcall *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);
};
#pragma pack(pop)

/* 142 */
#pragma pack(push, 8)
struct IUnknown
{
  IUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 106 */
#pragma pack(push, 8)
struct tagSAFEARRAYBOUND
{
  ULONG cElements;
  LONG lLbound;
};
#pragma pack(pop)

/* 105 */
typedef tagSAFEARRAYBOUND SAFEARRAYBOUND;

/* 145 */
#pragma pack(push, 8)
struct tagSAFEARRAY
{
  USHORT cDims;
  USHORT fFeatures;
  ULONG cbElements;
  ULONG cLocks;
  PVOID pvData;
  SAFEARRAYBOUND rgsabound[1];
};
#pragma pack(pop)

/* 156 */
#pragma pack(push, 8)
struct IRecordInfo
{
  IRecordInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 99 */
enum tagTYPEKIND
{
  TKIND_ENUM = 0x0,
  TKIND_RECORD = 0x1,
  TKIND_MODULE = 0x2,
  TKIND_INTERFACE = 0x3,
  TKIND_DISPATCH = 0x4,
  TKIND_COCLASS = 0x5,
  TKIND_ALIAS = 0x6,
  TKIND_UNION = 0x7,
  TKIND_MAX = 0x8,
};

/* 98 */
typedef tagTYPEKIND TYPEKIND;

/* 102 */
#pragma pack(push, 8)
union tagTYPEDESC::$AC700B6542D8071E244CADABF8A32897
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  HREFTYPE hreftype;
};
#pragma pack(pop)

/* 101 */
#pragma pack(push, 8)
struct tagTYPEDESC
{
  #pragma pack(push, 8)
  union
  {
    tagTYPEDESC *lptdesc;
    tagARRAYDESC *lpadesc;
    HREFTYPE hreftype;
  };
  #pragma pack(pop)
  VARTYPE vt;
};
#pragma pack(pop)

/* 100 */
typedef tagTYPEDESC TYPEDESC;

/* 110 */
#pragma pack(push, 8)
struct tagIDLDESC
{
  ULONG_PTR dwReserved;
  USHORT wIDLFlags;
};
#pragma pack(pop)

/* 109 */
typedef tagIDLDESC IDLDESC;

/* 93 */
#pragma pack(push, 8)
struct tagTYPEATTR
{
  GUID guid;
  LCID lcid;
  DWORD dwReserved;
  MEMBERID memidConstructor;
  MEMBERID memidDestructor;
  LPOLESTR lpstrSchema;
  ULONG cbSizeInstance;
  TYPEKIND typekind;
  WORD cFuncs;
  WORD cVars;
  WORD cImplTypes;
  WORD cbSizeVft;
  WORD cbAlignment;
  WORD wTypeFlags;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  TYPEDESC tdescAlias;
  IDLDESC idldescType;
};
#pragma pack(pop)

/* 111 */
#pragma pack(push, 8)
struct ITypeComp
{
  ITypeCompVtbl *lpVtbl;
};
#pragma pack(pop)

/* 120 */
typedef tagELEMDESC ELEMDESC;

/* 160 */
enum tagFUNCKIND
{
  FUNC_VIRTUAL = 0x0,
  FUNC_PUREVIRTUAL = 0x1,
  FUNC_NONVIRTUAL = 0x2,
  FUNC_STATIC = 0x3,
  FUNC_DISPATCH = 0x4,
};

/* 159 */
typedef tagFUNCKIND FUNCKIND;

/* 164 */
enum tagCALLCONV
{
  CC_FASTCALL = 0x0,
  CC_CDECL = 0x1,
  CC_MSCPASCAL = 0x2,
  CC_PASCAL = 0x2,
  CC_MACPASCAL = 0x3,
  CC_STDCALL = 0x4,
  CC_FPFASTCALL = 0x5,
  CC_SYSCALL = 0x6,
  CC_MPWCDECL = 0x7,
  CC_MPWPASCAL = 0x8,
  CC_MAX = 0x9,
};

/* 163 */
typedef tagCALLCONV CALLCONV;

/* 125 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 124 */
#pragma pack(push, 8)
struct tagPARAMDESC
{
  LPPARAMDESCEX pparamdescex;
  USHORT wParamFlags;
};
#pragma pack(pop)

/* 123 */
typedef tagPARAMDESC PARAMDESC;

/* 122 */
#pragma pack(push, 8)
union tagELEMDESC::$7C8F4CED1424251743D09680A1A0B07D
{
  IDLDESC idldesc;
  PARAMDESC paramdesc;
};
#pragma pack(pop)

/* 121 */
#pragma pack(push, 8)
struct tagELEMDESC
{
  TYPEDESC tdesc;
  #pragma pack(push, 8)
  union
  {
    IDLDESC idldesc;
    PARAMDESC paramdesc;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 118 */
#pragma pack(push, 8)
struct tagFUNCDESC
{
  MEMBERID memid;
  SCODE *lprgscode;
  ELEMDESC *lprgelemdescParam;
  FUNCKIND funckind;
  INVOKEKIND invkind;
  CALLCONV callconv;
  SHORT cParams;
  SHORT cParamsOpt;
  SHORT oVft;
  SHORT cScodes;
  ELEMDESC elemdescFunc;
  WORD wFuncFlags;
};
#pragma pack(pop)

/* 167 */
#pragma pack(push, 8)
union tagVARDESC::$E6274BD6A7149C9CC2413444FF769F0B
{
  ULONG oInst;
  VARIANT *lpvarValue;
};
#pragma pack(pop)

/* 169 */
enum tagVARKIND
{
  VAR_PERINSTANCE = 0x0,
  VAR_STATIC = 0x1,
  VAR_CONST = 0x2,
  VAR_DISPATCH = 0x3,
};

/* 168 */
typedef tagVARKIND VARKIND;

/* 166 */
#pragma pack(push, 8)
struct tagVARDESC
{
  MEMBERID memid;
  LPOLESTR lpstrSchema;
  #pragma pack(push, 8)
  union
  {
    ULONG oInst;
    VARIANT *lpvarValue;
  };
  #pragma pack(pop)
  ELEMDESC elemdescVar;
  WORD wVarFlags;
  VARKIND varkind;
};
#pragma pack(pop)

/* 174 */
#pragma pack(push, 8)
struct ITypeLib
{
  ITypeLibVtbl *lpVtbl;
};
#pragma pack(pop)

/* 143 */
#pragma pack(push, 8)
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IUnknown *This);
  ULONG (__stdcall *Release)(IUnknown *This);
};
#pragma pack(pop)

/* 158 */
typedef const OLECHAR *LPCOLESTR;

/* 157 */
#pragma pack(push, 8)
struct IRecordInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(IRecordInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IRecordInfo *This);
  ULONG (__stdcall *Release)(IRecordInfo *This);
  HRESULT (__stdcall *RecordInit)(IRecordInfo *This, PVOID pvNew);
  HRESULT (__stdcall *RecordClear)(IRecordInfo *This, PVOID pvExisting);
  HRESULT (__stdcall *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);
  HRESULT (__stdcall *GetGuid)(IRecordInfo *This, GUID *pguid);
  HRESULT (__stdcall *GetName)(IRecordInfo *This, BSTR *pbstrName);
  HRESULT (__stdcall *GetSize)(IRecordInfo *This, ULONG *pcbSize);
  HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);
  HRESULT (__stdcall *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);
  HRESULT (__stdcall *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);
  BOOL (__stdcall *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);
  PVOID (__stdcall *RecordCreate)(IRecordInfo *This);
  HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);
  HRESULT (__stdcall *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);
};
#pragma pack(pop)

/* 103 */
#pragma pack(push, 8)
struct tagARRAYDESC
{
  TYPEDESC tdescElem;
  USHORT cDims;
  SAFEARRAYBOUND rgbounds[1];
};
#pragma pack(pop)

/* 114 */
enum tagDESCKIND
{
  DESCKIND_NONE = 0x0,
  DESCKIND_FUNCDESC = 0x1,
  DESCKIND_VARDESC = 0x2,
  DESCKIND_TYPECOMP = 0x3,
  DESCKIND_IMPLICITAPPOBJ = 0x4,
  DESCKIND_MAX = 0x5,
};

/* 113 */
typedef tagDESCKIND DESCKIND;

/* 115 */
typedef tagBINDPTR BINDPTR;

/* 112 */
#pragma pack(push, 8)
struct ITypeCompVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeComp *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeComp *This);
  ULONG (__stdcall *Release)(ITypeComp *This);
  HRESULT (__stdcall *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
  HRESULT (__stdcall *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
};
#pragma pack(pop)

/* 126 */
#pragma pack(push, 8)
struct tagPARAMDESCEX
{
  ULONG cBytes;
  VARIANTARG varDefaultValue;
};
#pragma pack(pop)

/* 176 */
typedef tagTLIBATTR TLIBATTR;

/* 175 */
#pragma pack(push, 8)
struct ITypeLibVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeLib *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeLib *This);
  ULONG (__stdcall *Release)(ITypeLib *This);
  UINT (__stdcall *GetTypeInfoCount)(ITypeLib *This);
  HRESULT (__stdcall *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);
  HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *This, const GUID *const guid, ITypeInfo **ppTinfo);
  HRESULT (__stdcall *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
  HRESULT (__stdcall *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
  void (__stdcall *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);
};
#pragma pack(pop)

/* 116 */
#pragma pack(push, 8)
union tagBINDPTR
{
  FUNCDESC *lpfuncdesc;
  VARDESC *lpvardesc;
  ITypeComp *lptcomp;
};
#pragma pack(pop)

/* 179 */
enum tagSYSKIND
{
  SYS_WIN16 = 0x0,
  SYS_WIN32 = 0x1,
  SYS_MAC = 0x2,
  SYS_WIN64 = 0x3,
};

/* 178 */
typedef tagSYSKIND SYSKIND;

/* 177 */
#pragma pack(push, 8)
struct tagTLIBATTR
{
  GUID guid;
  LCID lcid;
  SYSKIND syskind;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  WORD wLibFlags;
};
#pragma pack(pop)

/* 182 */
typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;

/* 193 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 195 */
typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;

/* 198 */
typedef _DDSURFACEDESC *LPDDSURFACEDESC;

/* 214 */
typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;

/* 240 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);

/* 228 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);

/* 243 */
typedef _DDCAPS_DX7 DDCAPS_DX7;

/* 242 */
typedef DDCAPS_DX7 DDCAPS;

/* 241 */
typedef DDCAPS *LPDDCAPS;

/* 191 */
typedef DWORD *LPDWORD;

/* 248 */
typedef BOOL *LPBOOL;

/* 180 */
struct IDirectDrawVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDraw *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDraw *This);
  ULONG (__stdcall *Release)(IDirectDraw *This);
  HRESULT (__stdcall *Compact)(IDirectDraw *This);
  HRESULT (__stdcall *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);
  HRESULT (__stdcall *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);
  HRESULT (__stdcall *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);
  HRESULT (__stdcall *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);
  HRESULT (__stdcall *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw *This);
  HRESULT (__stdcall *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);
  HRESULT (__stdcall *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);
  HRESULT (__stdcall *GetScanLine)(IDirectDraw *This, LPDWORD);
  HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw *This, LPBOOL);
  HRESULT (__stdcall *Initialize)(IDirectDraw *This, GUID *);
  HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw *This);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw *This, HWND, DWORD);
  HRESULT (__stdcall *SetDisplayMode)(IDirectDraw *This, DWORD, DWORD, DWORD);
  HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);
};

/* 181 */
struct IDirectDraw
{
  IDirectDrawVtbl *lpVtbl;
};

/* 183 */
struct IDirectDrawClipper
{
  IDirectDrawClipperVtbl *lpVtbl;
};

/* 194 */
struct tagPALETTEENTRY
{
  BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
};

/* 196 */
struct IDirectDrawPalette
{
  IDirectDrawPaletteVtbl *lpVtbl;
};

/* 200 */
union _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B
{
  LONG lPitch;
  DWORD dwLinearSize;
};

/* 201 */
union _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B
{
  DWORD dwMipMapCount;
  DWORD dwZBufferBitDepth;
  DWORD dwRefreshRate;
};

/* 203 */
struct _DDCOLORKEY
{
  DWORD dwColorSpaceLowValue;
  DWORD dwColorSpaceHighValue;
};

/* 202 */
typedef _DDCOLORKEY DDCOLORKEY;

/* 206 */
union _DDPIXELFORMAT::$F1D3FB4D78950D0942225445130999CB
{
  DWORD dwRGBBitCount;
  DWORD dwYUVBitCount;
  DWORD dwZBufferBitDepth;
  DWORD dwAlphaBitDepth;
  DWORD dwLuminanceBitCount;
  DWORD dwBumpBitCount;
  DWORD dwPrivateFormatBitCount;
};

/* 207 */
union _DDPIXELFORMAT::$6A86D2BA2D533C5D3D5AB1F1491969D5
{
  DWORD dwRBitMask;
  DWORD dwYBitMask;
  DWORD dwStencilBitDepth;
  DWORD dwLuminanceBitMask;
  DWORD dwBumpDuBitMask;
  DWORD dwOperations;
};

/* 209 */
struct _DDPIXELFORMAT::$4689F3D0B997E93FAF3E67A693E85360::$A78036EB239B85FA27F661E6E98FFEA9
{
  WORD wFlipMSTypes;
  WORD wBltMSTypes;
};

/* 208 */
union _DDPIXELFORMAT::$4689F3D0B997E93FAF3E67A693E85360
{
  DWORD dwGBitMask;
  DWORD dwUBitMask;
  DWORD dwZBitMask;
  DWORD dwBumpDvBitMask;
  _DDPIXELFORMAT::$4689F3D0B997E93FAF3E67A693E85360::$A78036EB239B85FA27F661E6E98FFEA9 MultiSampleCaps;
};

/* 210 */
union _DDPIXELFORMAT::$4C86B66084EB9B6F3AE81991D3FADB38
{
  DWORD dwBBitMask;
  DWORD dwVBitMask;
  DWORD dwStencilBitMask;
  DWORD dwBumpLuminanceBitMask;
};

/* 211 */
union _DDPIXELFORMAT::$23DF69239FC04D9BE22118E1AD8451FB
{
  DWORD dwRGBAlphaBitMask;
  DWORD dwYUVAlphaBitMask;
  DWORD dwLuminanceAlphaBitMask;
  DWORD dwRGBZBitMask;
  DWORD dwYUVZBitMask;
};

/* 205 */
struct _DDPIXELFORMAT
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwFourCC;
  union
  {
    DWORD dwRGBBitCount;
    DWORD dwYUVBitCount;
    DWORD dwZBufferBitDepth;
    DWORD dwAlphaBitDepth;
    DWORD dwLuminanceBitCount;
    DWORD dwBumpBitCount;
    DWORD dwPrivateFormatBitCount;
  };
  union
  {
    DWORD dwRBitMask;
    DWORD dwYBitMask;
    DWORD dwStencilBitDepth;
    DWORD dwLuminanceBitMask;
    DWORD dwBumpDuBitMask;
    DWORD dwOperations;
  };
  union
  {
    DWORD dwGBitMask;
    DWORD dwUBitMask;
    DWORD dwZBitMask;
    DWORD dwBumpDvBitMask;
    _DDPIXELFORMAT::$4689F3D0B997E93FAF3E67A693E85360::$A78036EB239B85FA27F661E6E98FFEA9 MultiSampleCaps;
  };
  union
  {
    DWORD dwBBitMask;
    DWORD dwVBitMask;
    DWORD dwStencilBitMask;
    DWORD dwBumpLuminanceBitMask;
  };
  union
  {
    DWORD dwRGBAlphaBitMask;
    DWORD dwYUVAlphaBitMask;
    DWORD dwLuminanceAlphaBitMask;
    DWORD dwRGBZBitMask;
    DWORD dwYUVZBitMask;
  };
};

/* 204 */
typedef _DDPIXELFORMAT DDPIXELFORMAT;

/* 213 */
struct _DDSCAPS
{
  DWORD dwCaps;
};

/* 212 */
typedef _DDSCAPS DDSCAPS;

/* 199 */
struct _DDSURFACEDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwHeight;
  DWORD dwWidth;
  union
  {
    LONG lPitch;
    DWORD dwLinearSize;
  };
  DWORD dwBackBufferCount;
  union
  {
    DWORD dwMipMapCount;
    DWORD dwZBufferBitDepth;
    DWORD dwRefreshRate;
  };
  DWORD dwAlphaBitDepth;
  DWORD dwReserved;
  LPVOID lpSurface;
  DDCOLORKEY ddckCKDestOverlay;
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  DDPIXELFORMAT ddpfPixelFormat;
  DDSCAPS ddsCaps;
};

/* 215 */
struct IDirectDrawSurface
{
  IDirectDrawSurfaceVtbl *lpVtbl;
};

/* 247 */
union _DDSCAPS2::$19AC68468C4510B3DC631A4E89752068
{
  DWORD dwCaps4;
  DWORD dwVolumeDepth;
};

/* 246 */
struct _DDSCAPS2
{
  DWORD dwCaps;
  DWORD dwCaps2;
  DWORD dwCaps3;
  union
  {
    DWORD dwCaps4;
    DWORD dwVolumeDepth;
  };
};

/* 245 */
typedef _DDSCAPS2 DDSCAPS2;

/* 244 */
struct _DDCAPS_DX7
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwCaps2;
  DWORD dwCKeyCaps;
  DWORD dwFXCaps;
  DWORD dwFXAlphaCaps;
  DWORD dwPalCaps;
  DWORD dwSVCaps;
  DWORD dwAlphaBltConstBitDepths;
  DWORD dwAlphaBltPixelBitDepths;
  DWORD dwAlphaBltSurfaceBitDepths;
  DWORD dwAlphaOverlayConstBitDepths;
  DWORD dwAlphaOverlayPixelBitDepths;
  DWORD dwAlphaOverlaySurfaceBitDepths;
  DWORD dwZBufferBitDepths;
  DWORD dwVidMemTotal;
  DWORD dwVidMemFree;
  DWORD dwMaxVisibleOverlays;
  DWORD dwCurrVisibleOverlays;
  DWORD dwNumFourCCCodes;
  DWORD dwAlignBoundarySrc;
  DWORD dwAlignSizeSrc;
  DWORD dwAlignBoundaryDest;
  DWORD dwAlignSizeDest;
  DWORD dwAlignStrideAlign;
  DWORD dwRops[8];
  DDSCAPS ddsOldCaps;
  DWORD dwMinOverlayStretch;
  DWORD dwMaxOverlayStretch;
  DWORD dwMinLiveVideoStretch;
  DWORD dwMaxLiveVideoStretch;
  DWORD dwMinHwCodecStretch;
  DWORD dwMaxHwCodecStretch;
  DWORD dwReserved1;
  DWORD dwReserved2;
  DWORD dwReserved3;
  DWORD dwSVBCaps;
  DWORD dwSVBCKeyCaps;
  DWORD dwSVBFXCaps;
  DWORD dwSVBRops[8];
  DWORD dwVSBCaps;
  DWORD dwVSBCKeyCaps;
  DWORD dwVSBFXCaps;
  DWORD dwVSBRops[8];
  DWORD dwSSBCaps;
  DWORD dwSSBCKeyCaps;
  DWORD dwSSBFXCaps;
  DWORD dwSSBRops[8];
  DWORD dwMaxVideoPorts;
  DWORD dwCurrVideoPorts;
  DWORD dwSVBCaps2;
  DWORD dwNLVBCaps;
  DWORD dwNLVBCaps2;
  DWORD dwNLVBCKeyCaps;
  DWORD dwNLVBFXCaps;
  DWORD dwNLVBRops[8];
  DDSCAPS2 ddsCaps;
};

/* 185 */
typedef tagRECT *LPRECT;

/* 186 */
typedef _RGNDATA *LPRGNDATA;

/* 192 */
typedef IDirectDraw *LPDIRECTDRAW;

/* 184 */
struct IDirectDrawClipperVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawClipper *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawClipper *This);
  ULONG (__stdcall *Release)(IDirectDrawClipper *This);
  HRESULT (__stdcall *GetClipList)(IDirectDrawClipper *This, LPRECT, LPRGNDATA, LPDWORD);
  HRESULT (__stdcall *GetHWnd)(IDirectDrawClipper *This, HWND *);
  HRESULT (__stdcall *Initialize)(IDirectDrawClipper *This, LPDIRECTDRAW, DWORD);
  HRESULT (__stdcall *IsClipListChanged)(IDirectDrawClipper *This, BOOL *);
  HRESULT (__stdcall *SetClipList)(IDirectDrawClipper *This, LPRGNDATA, DWORD);
  HRESULT (__stdcall *SetHWnd)(IDirectDrawClipper *This, DWORD, HWND);
};

/* 197 */
struct IDirectDrawPaletteVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawPalette *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawPalette *This);
  ULONG (__stdcall *Release)(IDirectDrawPalette *This);
  HRESULT (__stdcall *GetCaps)(IDirectDrawPalette *This, LPDWORD);
  HRESULT (__stdcall *GetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);
  HRESULT (__stdcall *Initialize)(IDirectDrawPalette *This, LPDIRECTDRAW, DWORD, LPPALETTEENTRY);
  HRESULT (__stdcall *SetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);
};

/* 218 */
typedef _DDBLTFX DDBLTFX;

/* 217 */
typedef DDBLTFX *LPDDBLTFX;

/* 226 */
typedef _DDBLTBATCH DDBLTBATCH;

/* 225 */
typedef DDBLTBATCH *LPDDBLTBATCH;

/* 229 */
typedef DDSCAPS *LPDDSCAPS;

/* 230 */
typedef DDCOLORKEY *LPDDCOLORKEY;

/* 231 */
typedef HDC__ *HDC;

/* 233 */
typedef int *LPLONG;

/* 234 */
typedef DDPIXELFORMAT *LPDDPIXELFORMAT;

/* 236 */
typedef _DDOVERLAYFX DDOVERLAYFX;

/* 235 */
typedef DDOVERLAYFX *LPDDOVERLAYFX;

/* 216 */
struct IDirectDrawSurfaceVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurface *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurface *This);
  ULONG (__stdcall *Release)(IDirectDrawSurface *This);
  HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE);
  HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface *This, LPRECT);
  HRESULT (__stdcall *Blt)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDBLTFX);
  HRESULT (__stdcall *BltBatch)(IDirectDrawSurface *This, LPDDBLTBATCH, DWORD, DWORD);
  HRESULT (__stdcall *BltFast)(IDirectDrawSurface *This, DWORD, DWORD, LPDIRECTDRAWSURFACE, LPRECT, DWORD);
  HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);
  HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface *This, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *Flip)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE, DWORD);
  HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface *This, LPDDSCAPS, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectDrawSurface *This, LPDDSCAPS);
  HRESULT (__stdcall *GetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER *);
  HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *GetDC)(IDirectDrawSurface *This, HDC *);
  HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface *This, LPLONG, LPLONG);
  HRESULT (__stdcall *GetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE *);
  HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface *This, LPDDPIXELFORMAT);
  HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *Initialize)(IDirectDrawSurface *This, LPDIRECTDRAW, LPDDSURFACEDESC);
  HRESULT (__stdcall *IsLost)(IDirectDrawSurface *This);
  HRESULT (__stdcall *Lock)(IDirectDrawSurface *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);
  HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface *This, HDC);
  HRESULT (__stdcall *Restore)(IDirectDrawSurface *This);
  HRESULT (__stdcall *SetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER);
  HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface *This, LONG, LONG);
  HRESULT (__stdcall *SetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE);
  HRESULT (__stdcall *Unlock)(IDirectDrawSurface *This, LPVOID);
  HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDOVERLAYFX);
  HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);
};

/* 190 */
typedef tagRECT RECT;

/* 189 */
struct _RGNDATAHEADER
{
  DWORD dwSize;
  DWORD iType;
  DWORD nCount;
  DWORD nRgnSize;
  RECT rcBound;
};

/* 188 */
typedef _RGNDATAHEADER RGNDATAHEADER;

/* 187 */
struct _RGNDATA
{
  RGNDATAHEADER rdh;
  char Buffer[1];
};

/* 220 */
union _DDBLTFX::$EA6EC20695B0AA8ECF92A441DE55A935
{
  DWORD dwZDestConst;
  LPDIRECTDRAWSURFACE lpDDSZBufferDest;
};

/* 221 */
union _DDBLTFX::$702C52B3655764E63C007A6B73D01C19
{
  DWORD dwZSrcConst;
  LPDIRECTDRAWSURFACE lpDDSZBufferSrc;
};

/* 222 */
union _DDBLTFX::$3639C047B3E88B857708792B1F3FEC83
{
  DWORD dwAlphaDestConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaDest;
};

/* 223 */
union _DDBLTFX::$C0828DA952883A43DEF8D462ACC90C87
{
  DWORD dwAlphaSrcConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
};

/* 224 */
union _DDBLTFX::$4C109671A06E28B8127C40041AB5795C
{
  DWORD dwFillColor;
  DWORD dwFillDepth;
  DWORD dwFillPixel;
  LPDIRECTDRAWSURFACE lpDDSPattern;
};

/* 219 */
struct _DDBLTFX
{
  DWORD dwSize;
  DWORD dwDDFX;
  DWORD dwROP;
  DWORD dwDDROP;
  DWORD dwRotationAngle;
  DWORD dwZBufferOpCode;
  DWORD dwZBufferLow;
  DWORD dwZBufferHigh;
  DWORD dwZBufferBaseDest;
  DWORD dwZDestConstBitDepth;
  union
  {
    DWORD dwZDestConst;
    LPDIRECTDRAWSURFACE lpDDSZBufferDest;
  };
  DWORD dwZSrcConstBitDepth;
  union
  {
    DWORD dwZSrcConst;
    LPDIRECTDRAWSURFACE lpDDSZBufferSrc;
  };
  DWORD dwAlphaEdgeBlendBitDepth;
  DWORD dwAlphaEdgeBlend;
  DWORD dwReserved;
  DWORD dwAlphaDestConstBitDepth;
  union
  {
    DWORD dwAlphaDestConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaDest;
  };
  DWORD dwAlphaSrcConstBitDepth;
  union
  {
    DWORD dwAlphaSrcConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
  };
  union
  {
    DWORD dwFillColor;
    DWORD dwFillDepth;
    DWORD dwFillPixel;
    LPDIRECTDRAWSURFACE lpDDSPattern;
  };
  DDCOLORKEY ddckDestColorkey;
  DDCOLORKEY ddckSrcColorkey;
};

/* 227 */
struct _DDBLTBATCH
{
  LPRECT lprDest;
  LPDIRECTDRAWSURFACE lpDDSSrc;
  LPRECT lprSrc;
  DWORD dwFlags;
  LPDDBLTFX lpDDBltFx;
};

/* 232 */
struct HDC__
{
  int unused;
};

/* 238 */
union _DDOVERLAYFX::$3639C047B3E88B857708792B1F3FEC83
{
  DWORD dwAlphaDestConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaDest;
};

/* 239 */
union _DDOVERLAYFX::$C0828DA952883A43DEF8D462ACC90C87
{
  DWORD dwAlphaSrcConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
};

/* 237 */
struct _DDOVERLAYFX
{
  DWORD dwSize;
  DWORD dwAlphaEdgeBlendBitDepth;
  DWORD dwAlphaEdgeBlend;
  DWORD dwReserved;
  DWORD dwAlphaDestConstBitDepth;
  union
  {
    DWORD dwAlphaDestConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaDest;
  };
  DWORD dwAlphaSrcConstBitDepth;
  union
  {
    DWORD dwAlphaSrcConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
  };
  DDCOLORKEY dckDestColorkey;
  DDCOLORKEY dckSrcColorkey;
  DWORD dwDDFX;
  DWORD dwFlags;
};

/* 249 */
struct IDirectDraw2Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDraw2 *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDraw2 *This);
  ULONG (__stdcall *Release)(IDirectDraw2 *This);
  HRESULT (__stdcall *Compact)(IDirectDraw2 *This);
  HRESULT (__stdcall *CreateClipper)(IDirectDraw2 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);
  HRESULT (__stdcall *CreatePalette)(IDirectDraw2 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);
  HRESULT (__stdcall *CreateSurface)(IDirectDraw2 *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);
  HRESULT (__stdcall *DuplicateSurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);
  HRESULT (__stdcall *EnumSurfaces)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw2 *This);
  HRESULT (__stdcall *GetCaps)(IDirectDraw2 *This, LPDDCAPS, LPDDCAPS);
  HRESULT (__stdcall *GetDisplayMode)(IDirectDraw2 *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw2 *This, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetGDISurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw2 *This, LPDWORD);
  HRESULT (__stdcall *GetScanLine)(IDirectDraw2 *This, LPDWORD);
  HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw2 *This, LPBOOL);
  HRESULT (__stdcall *Initialize)(IDirectDraw2 *This, GUID *);
  HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw2 *This);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw2 *This, HWND, DWORD);
  HRESULT (__stdcall *SetDisplayMode)(IDirectDraw2 *This, DWORD, DWORD, DWORD, DWORD, DWORD);
  HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw2 *This, DWORD, HANDLE);
  HRESULT (__stdcall *GetAvailableVidMem)(IDirectDraw2 *This, LPDDSCAPS, LPDWORD, LPDWORD);
};

/* 250 */
struct IDirectDraw2
{
  IDirectDraw2Vtbl *lpVtbl;
};

/* 253 */
typedef _DDSURFACEDESC2 *LPDDSURFACEDESC2;

/* 260 */
typedef IDirectDrawSurface4 *LPDIRECTDRAWSURFACE4;

/* 265 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK2)(LPDDSURFACEDESC2, LPVOID);

/* 263 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK2)(LPDIRECTDRAWSURFACE4, LPDDSURFACEDESC2, LPVOID);

/* 264 */
typedef DDSCAPS2 *LPDDSCAPS2;

/* 266 */
typedef tagDDDEVICEIDENTIFIER *LPDDDEVICEIDENTIFIER;

/* 251 */
struct IDirectDraw4Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDraw4 *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDraw4 *This);
  ULONG (__stdcall *Release)(IDirectDraw4 *This);
  HRESULT (__stdcall *Compact)(IDirectDraw4 *This);
  HRESULT (__stdcall *CreateClipper)(IDirectDraw4 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);
  HRESULT (__stdcall *CreatePalette)(IDirectDraw4 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);
  HRESULT (__stdcall *CreateSurface)(IDirectDraw4 *This, LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 *, IUnknown *);
  HRESULT (__stdcall *DuplicateSurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 *);
  HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2);
  HRESULT (__stdcall *EnumSurfaces)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMSURFACESCALLBACK2);
  HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw4 *This);
  HRESULT (__stdcall *GetCaps)(IDirectDraw4 *This, LPDDCAPS, LPDDCAPS);
  HRESULT (__stdcall *GetDisplayMode)(IDirectDraw4 *This, LPDDSURFACEDESC2);
  HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw4 *This, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetGDISurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4 *);
  HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw4 *This, LPDWORD);
  HRESULT (__stdcall *GetScanLine)(IDirectDraw4 *This, LPDWORD);
  HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw4 *This, LPBOOL);
  HRESULT (__stdcall *Initialize)(IDirectDraw4 *This, GUID *);
  HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw4 *This);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw4 *This, HWND, DWORD);
  HRESULT (__stdcall *SetDisplayMode)(IDirectDraw4 *This, DWORD, DWORD, DWORD, DWORD, DWORD);
  HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw4 *This, DWORD, HANDLE);
  HRESULT (__stdcall *GetAvailableVidMem)(IDirectDraw4 *This, LPDDSCAPS2, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetSurfaceFromDC)(IDirectDraw4 *This, HDC, LPDIRECTDRAWSURFACE4 *);
  HRESULT (__stdcall *RestoreAllSurfaces)(IDirectDraw4 *This);
  HRESULT (__stdcall *TestCooperativeLevel)(IDirectDraw4 *This);
  HRESULT (__stdcall *GetDeviceIdentifier)(IDirectDraw4 *This, LPDDDEVICEIDENTIFIER, DWORD);
};

/* 252 */
struct IDirectDraw4
{
  IDirectDraw4Vtbl *lpVtbl;
};

/* 255 */
union _DDSURFACEDESC2::$091DBF7D405BE25E65B16620C008128B
{
  LONG lPitch;
  DWORD dwLinearSize;
};

/* 256 */
union _DDSURFACEDESC2::$E56E877DD0D4D3B03846BC7047D947ED
{
  DWORD dwBackBufferCount;
  DWORD dwDepth;
};

/* 257 */
union _DDSURFACEDESC2::$F25F5019EA70F6B9B11866A0D418A260
{
  DWORD dwMipMapCount;
  DWORD dwRefreshRate;
  DWORD dwSrcVBHandle;
};

/* 258 */
union _DDSURFACEDESC2::$5B12F1D1A21F9ED7C15CB39448B5A42D
{
  DDCOLORKEY ddckCKDestOverlay;
  DWORD dwEmptyFaceColor;
};

/* 259 */
union _DDSURFACEDESC2::$640C42AFF919FFD3058B9E962436B842
{
  DDPIXELFORMAT ddpfPixelFormat;
  DWORD dwFVF;
};

/* 254 */
struct _DDSURFACEDESC2
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwHeight;
  DWORD dwWidth;
  union
  {
    LONG lPitch;
    DWORD dwLinearSize;
  };
  union
  {
    DWORD dwBackBufferCount;
    DWORD dwDepth;
  };
  union
  {
    DWORD dwMipMapCount;
    DWORD dwRefreshRate;
    DWORD dwSrcVBHandle;
  };
  DWORD dwAlphaBitDepth;
  DWORD dwReserved;
  LPVOID lpSurface;
  union
  {
    DDCOLORKEY ddckCKDestOverlay;
    DWORD dwEmptyFaceColor;
  };
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  union
  {
    DDPIXELFORMAT ddpfPixelFormat;
    DWORD dwFVF;
  };
  DDSCAPS2 ddsCaps;
  DWORD dwTextureStage;
};

/* 261 */
struct IDirectDrawSurface4
{
  IDirectDrawSurface4Vtbl *lpVtbl;
};

/* 267 */
struct tagDDDEVICEIDENTIFIER
{
  char szDriver[512];
  char szDescription[512];
  LARGE_INTEGER liDriverVersion;
  DWORD dwVendorId;
  DWORD dwDeviceId;
  DWORD dwSubSysId;
  DWORD dwRevision;
  GUID guidDeviceIdentifier;
};

/* 262 */
struct IDirectDrawSurface4Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurface4 *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurface4 *This);
  ULONG (__stdcall *Release)(IDirectDrawSurface4 *This);
  HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4);
  HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface4 *This, LPRECT);
  HRESULT (__stdcall *Blt)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDBLTFX);
  HRESULT (__stdcall *BltBatch)(IDirectDrawSurface4 *This, LPDDBLTBATCH, DWORD, DWORD);
  HRESULT (__stdcall *BltFast)(IDirectDrawSurface4 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE4, LPRECT, DWORD);
  HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);
  HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface4 *This, LPVOID, LPDDENUMSURFACESCALLBACK2);
  HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface4 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK2);
  HRESULT (__stdcall *Flip)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4, DWORD);
  HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface4 *This, LPDDSCAPS2, LPDIRECTDRAWSURFACE4 *);
  HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface4 *This, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectDrawSurface4 *This, LPDDSCAPS2);
  HRESULT (__stdcall *GetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER *);
  HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *GetDC)(IDirectDrawSurface4 *This, HDC *);
  HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface4 *This, DWORD);
  HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface4 *This, LPLONG, LPLONG);
  HRESULT (__stdcall *GetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE *);
  HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface4 *This, LPDDPIXELFORMAT);
  HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2);
  HRESULT (__stdcall *Initialize)(IDirectDrawSurface4 *This, LPDIRECTDRAW, LPDDSURFACEDESC2);
  HRESULT (__stdcall *IsLost)(IDirectDrawSurface4 *This);
  HRESULT (__stdcall *Lock)(IDirectDrawSurface4 *This, LPRECT, LPDDSURFACEDESC2, DWORD, HANDLE);
  HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface4 *This, HDC);
  HRESULT (__stdcall *Restore)(IDirectDrawSurface4 *This);
  HRESULT (__stdcall *SetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER);
  HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface4 *This, LONG, LONG);
  HRESULT (__stdcall *SetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE);
  HRESULT (__stdcall *Unlock)(IDirectDrawSurface4 *This, LPRECT);
  HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDOVERLAYFX);
  HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface4 *This, DWORD);
  HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);
  HRESULT (__stdcall *GetDDInterface)(IDirectDrawSurface4 *This, LPVOID *);
  HRESULT (__stdcall *PageLock)(IDirectDrawSurface4 *This, DWORD);
  HRESULT (__stdcall *PageUnlock)(IDirectDrawSurface4 *This, DWORD);
  HRESULT (__stdcall *SetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2, DWORD);
  HRESULT (__stdcall *SetPrivateData)(IDirectDrawSurface4 *This, const GUID *const, LPVOID, DWORD, DWORD);
  HRESULT (__stdcall *GetPrivateData)(IDirectDrawSurface4 *This, const GUID *const, LPVOID, LPDWORD);
  HRESULT (__stdcall *FreePrivateData)(IDirectDrawSurface4 *This, const GUID *const);
  HRESULT (__stdcall *GetUniquenessValue)(IDirectDrawSurface4 *This, LPDWORD);
  HRESULT (__stdcall *ChangeUniquenessValue)(IDirectDrawSurface4 *This);
};

/* 270 */
typedef IDirectDrawSurface2 *LPDIRECTDRAWSURFACE2;

/* 268 */
struct IDirectDrawSurface2Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurface2 *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurface2 *This);
  ULONG (__stdcall *Release)(IDirectDrawSurface2 *This);
  HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2);
  HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface2 *This, LPRECT);
  HRESULT (__stdcall *Blt)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDBLTFX);
  HRESULT (__stdcall *BltBatch)(IDirectDrawSurface2 *This, LPDDBLTBATCH, DWORD, DWORD);
  HRESULT (__stdcall *BltFast)(IDirectDrawSurface2 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE2, LPRECT, DWORD);
  HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);
  HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface2 *This, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface2 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *Flip)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2, DWORD);
  HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface2 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE2 *);
  HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface2 *This, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectDrawSurface2 *This, LPDDSCAPS);
  HRESULT (__stdcall *GetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER *);
  HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *GetDC)(IDirectDrawSurface2 *This, HDC *);
  HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface2 *This, DWORD);
  HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface2 *This, LPLONG, LPLONG);
  HRESULT (__stdcall *GetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE *);
  HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface2 *This, LPDDPIXELFORMAT);
  HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface2 *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *Initialize)(IDirectDrawSurface2 *This, LPDIRECTDRAW, LPDDSURFACEDESC);
  HRESULT (__stdcall *IsLost)(IDirectDrawSurface2 *This);
  HRESULT (__stdcall *Lock)(IDirectDrawSurface2 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);
  HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface2 *This, HDC);
  HRESULT (__stdcall *Restore)(IDirectDrawSurface2 *This);
  HRESULT (__stdcall *SetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER);
  HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface2 *This, LONG, LONG);
  HRESULT (__stdcall *SetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE);
  HRESULT (__stdcall *Unlock)(IDirectDrawSurface2 *This, LPVOID);
  HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDOVERLAYFX);
  HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface2 *This, DWORD);
  HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);
  HRESULT (__stdcall *GetDDInterface)(IDirectDrawSurface2 *This, LPVOID *);
  HRESULT (__stdcall *PageLock)(IDirectDrawSurface2 *This, DWORD);
  HRESULT (__stdcall *PageUnlock)(IDirectDrawSurface2 *This, DWORD);
};

/* 269 */
struct IDirectDrawSurface2
{
  IDirectDrawSurface2Vtbl *lpVtbl;
};

/* 273 */
typedef IDirectDrawSurface3 *LPDIRECTDRAWSURFACE3;

/* 271 */
struct IDirectDrawSurface3Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurface3 *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurface3 *This);
  ULONG (__stdcall *Release)(IDirectDrawSurface3 *This);
  HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3);
  HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface3 *This, LPRECT);
  HRESULT (__stdcall *Blt)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDBLTFX);
  HRESULT (__stdcall *BltBatch)(IDirectDrawSurface3 *This, LPDDBLTBATCH, DWORD, DWORD);
  HRESULT (__stdcall *BltFast)(IDirectDrawSurface3 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE3, LPRECT, DWORD);
  HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);
  HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface3 *This, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface3 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *Flip)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3, DWORD);
  HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface3 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE3 *);
  HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface3 *This, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectDrawSurface3 *This, LPDDSCAPS);
  HRESULT (__stdcall *GetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER *);
  HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *GetDC)(IDirectDrawSurface3 *This, HDC *);
  HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface3 *This, DWORD);
  HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface3 *This, LPLONG, LPLONG);
  HRESULT (__stdcall *GetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE *);
  HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface3 *This, LPDDPIXELFORMAT);
  HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *Initialize)(IDirectDrawSurface3 *This, LPDIRECTDRAW, LPDDSURFACEDESC);
  HRESULT (__stdcall *IsLost)(IDirectDrawSurface3 *This);
  HRESULT (__stdcall *Lock)(IDirectDrawSurface3 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);
  HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface3 *This, HDC);
  HRESULT (__stdcall *Restore)(IDirectDrawSurface3 *This);
  HRESULT (__stdcall *SetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER);
  HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface3 *This, LONG, LONG);
  HRESULT (__stdcall *SetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE);
  HRESULT (__stdcall *Unlock)(IDirectDrawSurface3 *This, LPVOID);
  HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDOVERLAYFX);
  HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface3 *This, DWORD);
  HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);
  HRESULT (__stdcall *GetDDInterface)(IDirectDrawSurface3 *This, LPVOID *);
  HRESULT (__stdcall *PageLock)(IDirectDrawSurface3 *This, DWORD);
  HRESULT (__stdcall *PageUnlock)(IDirectDrawSurface3 *This, DWORD);
  HRESULT (__stdcall *SetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC, DWORD);
};

/* 272 */
struct IDirectDrawSurface3
{
  IDirectDrawSurface3Vtbl *lpVtbl;
};

/* 276 */
typedef _DDCOLORCONTROL *LPDDCOLORCONTROL;

/* 274 */
struct IDirectDrawColorControlVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawColorControl *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawColorControl *This);
  ULONG (__stdcall *Release)(IDirectDrawColorControl *This);
  HRESULT (__stdcall *GetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);
  HRESULT (__stdcall *SetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);
};

/* 275 */
struct IDirectDrawColorControl
{
  IDirectDrawColorControlVtbl *lpVtbl;
};

/* 277 */
struct _DDCOLORCONTROL
{
  DWORD dwSize;
  DWORD dwFlags;
  LONG lBrightness;
  LONG lContrast;
  LONG lHue;
  LONG lSaturation;
  LONG lSharpness;
  LONG lGamma;
  LONG lColorEnable;
  DWORD dwReserved1;
};

/* 281 */
typedef _DDGAMMARAMP DDGAMMARAMP;

/* 280 */
typedef DDGAMMARAMP *LPDDGAMMARAMP;

/* 278 */
struct IDirectDrawGammaControlVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawGammaControl *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawGammaControl *This);
  ULONG (__stdcall *Release)(IDirectDrawGammaControl *This);
  HRESULT (__stdcall *GetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);
  HRESULT (__stdcall *SetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);
};

/* 279 */
struct IDirectDrawGammaControl
{
  IDirectDrawGammaControlVtbl *lpVtbl;
};

/* 282 */
struct _DDGAMMARAMP
{
  WORD red[256];
  WORD green[256];
  WORD blue[256];
};

/* 285 */
typedef _DDVIDEOPORTDESC *LPDDVIDEOPORTDESC;

/* 289 */
typedef IDirectDrawVideoPort *LPDIRECTDRAWVIDEOPORT;

/* 296 */
typedef _DDVIDEOPORTCAPS *LPDDVIDEOPORTCAPS;

/* 298 */
typedef HRESULT (__stdcall *LPDDENUMVIDEOCALLBACK)(LPDDVIDEOPORTCAPS, LPVOID);

/* 299 */
typedef _DDVIDEOPORTCONNECT *LPDDVIDEOPORTCONNECT;

/* 300 */
typedef _DDVIDEOPORTSTATUS *LPDDVIDEOPORTSTATUS;

/* 283 */
struct IDDVideoPortContainerVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDDVideoPortContainer *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDDVideoPortContainer *This);
  ULONG (__stdcall *Release)(IDDVideoPortContainer *This);
  HRESULT (__stdcall *CreateVideoPort)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTDESC, LPDIRECTDRAWVIDEOPORT *, IUnknown *);
  HRESULT (__stdcall *EnumVideoPorts)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTCAPS, LPVOID, LPDDENUMVIDEOCALLBACK);
  HRESULT (__stdcall *GetVideoPortConnectInfo)(IDDVideoPortContainer *This, DWORD, LPDWORD pcInfo, LPDDVIDEOPORTCONNECT);
  HRESULT (__stdcall *QueryVideoPortStatus)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTSTATUS);
};

/* 284 */
struct IDDVideoPortContainer
{
  IDDVideoPortContainerVtbl *lpVtbl;
};

/* 288 */
struct _DDVIDEOPORTCONNECT
{
  DWORD dwSize;
  DWORD dwPortWidth;
  GUID guidTypeID;
  DWORD dwFlags;
  ULONG_PTR dwReserved1;
};

/* 287 */
typedef _DDVIDEOPORTCONNECT DDVIDEOPORTCONNECT;

/* 286 */
struct _DDVIDEOPORTDESC
{
  DWORD dwSize;
  DWORD dwFieldWidth;
  DWORD dwVBIWidth;
  DWORD dwFieldHeight;
  DWORD dwMicrosecondsPerField;
  DWORD dwMaxPixelsPerSecond;
  DWORD dwVideoPortID;
  DWORD dwReserved1;
  DDVIDEOPORTCONNECT VideoPortType;
  ULONG_PTR dwReserved2;
  ULONG_PTR dwReserved3;
};

/* 290 */
struct IDirectDrawVideoPort
{
  IDirectDrawVideoPortVtbl *lpVtbl;
};

/* 297 */
struct _DDVIDEOPORTCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwMaxWidth;
  DWORD dwMaxVBIWidth;
  DWORD dwMaxHeight;
  DWORD dwVideoPortID;
  DWORD dwCaps;
  DWORD dwFX;
  DWORD dwNumAutoFlipSurfaces;
  DWORD dwAlignVideoPortBoundary;
  DWORD dwAlignVideoPortPrescaleWidth;
  DWORD dwAlignVideoPortCropBoundary;
  DWORD dwAlignVideoPortCropWidth;
  DWORD dwPreshrinkXStep;
  DWORD dwPreshrinkYStep;
  DWORD dwNumVBIAutoFlipSurfaces;
  DWORD dwNumPreferredAutoflip;
  WORD wNumFilterTapsX;
  WORD wNumFilterTapsY;
};

/* 301 */
struct _DDVIDEOPORTSTATUS
{
  DWORD dwSize;
  BOOL bInUse;
  DWORD dwFlags;
  DWORD dwReserved1;
  DDVIDEOPORTCONNECT VideoPortType;
  ULONG_PTR dwReserved2;
  ULONG_PTR dwReserved3;
};

/* 292 */
typedef _DDVIDEOPORTBANDWIDTH *LPDDVIDEOPORTBANDWIDTH;

/* 294 */
typedef _DDVIDEOPORTINFO *LPDDVIDEOPORTINFO;

/* 291 */
struct IDirectDrawVideoPortVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawVideoPort *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawVideoPort *This);
  ULONG (__stdcall *Release)(IDirectDrawVideoPort *This);
  HRESULT (__stdcall *Flip)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);
  HRESULT (__stdcall *GetBandwidthInfo)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, DWORD, DWORD, DWORD, LPDDVIDEOPORTBANDWIDTH);
  HRESULT (__stdcall *GetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);
  HRESULT (__stdcall *GetInputFormats)(IDirectDrawVideoPort *This, LPDWORD lpNumFormats, LPDDPIXELFORMAT, DWORD);
  HRESULT (__stdcall *GetOutputFormats)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, LPDWORD lpNumFormats, LPDDPIXELFORMAT, DWORD);
  HRESULT (__stdcall *GetFieldPolarity)(IDirectDrawVideoPort *This, LPBOOL);
  HRESULT (__stdcall *GetVideoLine)(IDirectDrawVideoPort *This, LPDWORD);
  HRESULT (__stdcall *GetVideoSignalStatus)(IDirectDrawVideoPort *This, LPDWORD);
  HRESULT (__stdcall *SetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);
  HRESULT (__stdcall *SetTargetSurface)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);
  HRESULT (__stdcall *StartVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);
  HRESULT (__stdcall *StopVideo)(IDirectDrawVideoPort *This);
  HRESULT (__stdcall *UpdateVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);
  HRESULT (__stdcall *WaitForSync)(IDirectDrawVideoPort *This, DWORD, DWORD, DWORD);
};

/* 293 */
struct _DDVIDEOPORTBANDWIDTH
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwOverlay;
  DWORD dwColorkey;
  DWORD dwYInterpolate;
  DWORD dwYInterpAndColorkey;
  ULONG_PTR dwReserved1;
  ULONG_PTR dwReserved2;
};

/* 295 */
struct _DDVIDEOPORTINFO
{
  DWORD dwSize;
  DWORD dwOriginX;
  DWORD dwOriginY;
  DWORD dwVPFlags;
  RECT rCrop;
  DWORD dwPrescaleWidth;
  DWORD dwPrescaleHeight;
  LPDDPIXELFORMAT lpddpfInputFormat;
  LPDDPIXELFORMAT lpddpfVBIInputFormat;
  LPDDPIXELFORMAT lpddpfVBIOutputFormat;
  DWORD dwVBIHeight;
  ULONG_PTR dwReserved1;
  ULONG_PTR dwReserved2;
};

/* 304 */
typedef _DDKERNELCAPS *LPDDKERNELCAPS;

/* 306 */
typedef unsigned int *PULONG_PTR;

/* 302 */
struct IDirectDrawKernelVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawKernel *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawKernel *This);
  ULONG (__stdcall *Release)(IDirectDrawKernel *This);
  HRESULT (__stdcall *GetCaps)(IDirectDrawKernel *This, LPDDKERNELCAPS);
  HRESULT (__stdcall *GetKernelHandle)(IDirectDrawKernel *This, PULONG_PTR);
  HRESULT (__stdcall *ReleaseKernelHandle)(IDirectDrawKernel *This);
};

/* 303 */
struct IDirectDrawKernel
{
  IDirectDrawKernelVtbl *lpVtbl;
};

/* 305 */
struct _DDKERNELCAPS
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwIRQCaps;
};

/* 307 */
struct IDirectDrawSurfaceKernelVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurfaceKernel *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurfaceKernel *This);
  ULONG (__stdcall *Release)(IDirectDrawSurfaceKernel *This);
  HRESULT (__stdcall *GetKernelHandle)(IDirectDrawSurfaceKernel *This, PULONG_PTR);
  HRESULT (__stdcall *ReleaseKernelHandle)(IDirectDrawSurfaceKernel *This);
};

/* 308 */
struct IDirectDrawSurfaceKernel
{
  IDirectDrawSurfaceKernelVtbl *lpVtbl;
};

/* 311 */
typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;

/* 332 */
typedef IUnknown *LPUNKNOWN;

/* 334 */
typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;

/* 333 */
typedef BOOL (__stdcall *LPDIENUMDEVICESCALLBACKA)(LPCDIDEVICEINSTANCEA, LPVOID);

/* 309 */
struct IDirectInputAVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputA *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputA *This);
  ULONG (__stdcall *Release)(IDirectInputA *This);
  HRESULT (__stdcall *CreateDevice)(IDirectInputA *This, const GUID *const, LPDIRECTINPUTDEVICEA *, LPUNKNOWN);
  HRESULT (__stdcall *EnumDevices)(IDirectInputA *This, DWORD, LPDIENUMDEVICESCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetDeviceStatus)(IDirectInputA *This, const GUID *const);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputA *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputA *This, HINSTANCE, DWORD);
};

/* 310 */
struct IDirectInputA
{
  IDirectInputAVtbl *lpVtbl;
};

/* 312 */
struct IDirectInputDeviceA
{
  IDirectInputDeviceAVtbl *lpVtbl;
};

/* 331 */
struct DIDEVICEINSTANCEA
{
  DWORD dwSize;
  GUID guidInstance;
  GUID guidProduct;
  DWORD dwDevType;
  CHAR tszInstanceName[260];
  CHAR tszProductName[260];
  GUID guidFFDriver;
  WORD wUsagePage;
  WORD wUsage;
};

/* 314 */
typedef DIDEVCAPS *LPDIDEVCAPS;

/* 317 */
typedef const DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;

/* 316 */
typedef BOOL (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKA)(LPCDIDEVICEOBJECTINSTANCEA, LPVOID);

/* 319 */
typedef DIPROPHEADER *LPDIPROPHEADER;

/* 321 */
typedef const DIPROPHEADER *LPCDIPROPHEADER;

/* 322 */
typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

/* 325 */
typedef _DIDATAFORMAT DIDATAFORMAT;

/* 324 */
typedef const DIDATAFORMAT *LPCDIDATAFORMAT;

/* 329 */
typedef DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;

/* 330 */
typedef DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;

/* 313 */
struct IDirectInputDeviceAVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputDeviceA *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputDeviceA *This);
  ULONG (__stdcall *Release)(IDirectInputDeviceA *This);
  HRESULT (__stdcall *GetCapabilities)(IDirectInputDeviceA *This, LPDIDEVCAPS);
  HRESULT (__stdcall *EnumObjects)(IDirectInputDeviceA *This, LPDIENUMDEVICEOBJECTSCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetProperty)(IDirectInputDeviceA *This, const GUID *const, LPDIPROPHEADER);
  HRESULT (__stdcall *SetProperty)(IDirectInputDeviceA *This, const GUID *const, LPCDIPROPHEADER);
  HRESULT (__stdcall *Acquire)(IDirectInputDeviceA *This);
  HRESULT (__stdcall *Unacquire)(IDirectInputDeviceA *This);
  HRESULT (__stdcall *GetDeviceState)(IDirectInputDeviceA *This, DWORD, LPVOID);
  HRESULT (__stdcall *GetDeviceData)(IDirectInputDeviceA *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);
  HRESULT (__stdcall *SetDataFormat)(IDirectInputDeviceA *This, LPCDIDATAFORMAT);
  HRESULT (__stdcall *SetEventNotification)(IDirectInputDeviceA *This, HANDLE);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDeviceA *This, HWND, DWORD);
  HRESULT (__stdcall *GetObjectInfo)(IDirectInputDeviceA *This, LPDIDEVICEOBJECTINSTANCEA, DWORD, DWORD);
  HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDeviceA *This, LPDIDEVICEINSTANCEA);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputDeviceA *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputDeviceA *This, HINSTANCE, DWORD, const GUID *const);
};

/* 315 */
struct DIDEVCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwDevType;
  DWORD dwAxes;
  DWORD dwButtons;
  DWORD dwPOVs;
  DWORD dwFFSamplePeriod;
  DWORD dwFFMinTimeResolution;
  DWORD dwFirmwareRevision;
  DWORD dwHardwareRevision;
  DWORD dwFFDriverVersion;
};

/* 318 */
struct DIDEVICEOBJECTINSTANCEA
{
  DWORD dwSize;
  GUID guidType;
  DWORD dwOfs;
  DWORD dwType;
  DWORD dwFlags;
  CHAR tszName[260];
  DWORD dwFFMaxForce;
  DWORD dwFFForceResolution;
  WORD wCollectionNumber;
  WORD wDesignatorIndex;
  WORD wUsagePage;
  WORD wUsage;
  DWORD dwDimension;
  WORD wExponent;
  WORD wReportId;
};

/* 320 */
struct DIPROPHEADER
{
  DWORD dwSize;
  DWORD dwHeaderSize;
  DWORD dwObj;
  DWORD dwHow;
};

/* 323 */
struct DIDEVICEOBJECTDATA
{
  DWORD dwOfs;
  DWORD dwData;
  DWORD dwTimeStamp;
  DWORD dwSequence;
  UINT_PTR uAppData;
};

/* 327 */
typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;

/* 326 */
struct _DIDATAFORMAT
{
  DWORD dwSize;
  DWORD dwObjSize;
  DWORD dwFlags;
  DWORD dwDataSize;
  DWORD dwNumObjs;
  LPDIOBJECTDATAFORMAT rgodf;
};

/* 328 */
struct _DIOBJECTDATAFORMAT
{
  const GUID *pguid;
  DWORD dwOfs;
  DWORD dwType;
  DWORD dwFlags;
};

/* 337 */
typedef IDirectInputDeviceW *LPDIRECTINPUTDEVICEW;

/* 347 */
typedef const DIDEVICEINSTANCEW *LPCDIDEVICEINSTANCEW;

/* 346 */
typedef BOOL (__stdcall *LPDIENUMDEVICESCALLBACKW)(LPCDIDEVICEINSTANCEW, LPVOID);

/* 335 */
struct IDirectInputWVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputW *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputW *This);
  ULONG (__stdcall *Release)(IDirectInputW *This);
  HRESULT (__stdcall *CreateDevice)(IDirectInputW *This, const GUID *const, LPDIRECTINPUTDEVICEW *, LPUNKNOWN);
  HRESULT (__stdcall *EnumDevices)(IDirectInputW *This, DWORD, LPDIENUMDEVICESCALLBACKW, LPVOID, DWORD);
  HRESULT (__stdcall *GetDeviceStatus)(IDirectInputW *This, const GUID *const);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputW *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputW *This, HINSTANCE, DWORD);
};

/* 336 */
struct IDirectInputW
{
  IDirectInputWVtbl *lpVtbl;
};

/* 338 */
struct IDirectInputDeviceW
{
  IDirectInputDeviceWVtbl *lpVtbl;
};

/* 345 */
struct DIDEVICEINSTANCEW
{
  DWORD dwSize;
  GUID guidInstance;
  GUID guidProduct;
  DWORD dwDevType;
  WCHAR tszInstanceName[260];
  WCHAR tszProductName[260];
  GUID guidFFDriver;
  WORD wUsagePage;
  WORD wUsage;
};

/* 341 */
typedef const DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCEW;

/* 340 */
typedef BOOL (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKW)(LPCDIDEVICEOBJECTINSTANCEW, LPVOID);

/* 343 */
typedef DIDEVICEOBJECTINSTANCEW *LPDIDEVICEOBJECTINSTANCEW;

/* 344 */
typedef DIDEVICEINSTANCEW *LPDIDEVICEINSTANCEW;

/* 339 */
struct IDirectInputDeviceWVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputDeviceW *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputDeviceW *This);
  ULONG (__stdcall *Release)(IDirectInputDeviceW *This);
  HRESULT (__stdcall *GetCapabilities)(IDirectInputDeviceW *This, LPDIDEVCAPS);
  HRESULT (__stdcall *EnumObjects)(IDirectInputDeviceW *This, LPDIENUMDEVICEOBJECTSCALLBACKW, LPVOID, DWORD);
  HRESULT (__stdcall *GetProperty)(IDirectInputDeviceW *This, const GUID *const, LPDIPROPHEADER);
  HRESULT (__stdcall *SetProperty)(IDirectInputDeviceW *This, const GUID *const, LPCDIPROPHEADER);
  HRESULT (__stdcall *Acquire)(IDirectInputDeviceW *This);
  HRESULT (__stdcall *Unacquire)(IDirectInputDeviceW *This);
  HRESULT (__stdcall *GetDeviceState)(IDirectInputDeviceW *This, DWORD, LPVOID);
  HRESULT (__stdcall *GetDeviceData)(IDirectInputDeviceW *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);
  HRESULT (__stdcall *SetDataFormat)(IDirectInputDeviceW *This, LPCDIDATAFORMAT);
  HRESULT (__stdcall *SetEventNotification)(IDirectInputDeviceW *This, HANDLE);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDeviceW *This, HWND, DWORD);
  HRESULT (__stdcall *GetObjectInfo)(IDirectInputDeviceW *This, LPDIDEVICEOBJECTINSTANCEW, DWORD, DWORD);
  HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDeviceW *This, LPDIDEVICEINSTANCEW);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputDeviceW *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputDeviceW *This, HINSTANCE, DWORD, const GUID *const);
};

/* 342 */
struct DIDEVICEOBJECTINSTANCEW
{
  DWORD dwSize;
  GUID guidType;
  DWORD dwOfs;
  DWORD dwType;
  DWORD dwFlags;
  WCHAR tszName[260];
  DWORD dwFFMaxForce;
  DWORD dwFFForceResolution;
  WORD wCollectionNumber;
  WORD wDesignatorIndex;
  WORD wUsagePage;
  WORD wUsage;
  DWORD dwDimension;
  WORD wExponent;
  WORD wReportId;
};

/* 350 */
typedef GUID *LPGUID;

/* 348 */
struct IDirectInput2AVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInput2A *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInput2A *This);
  ULONG (__stdcall *Release)(IDirectInput2A *This);
  HRESULT (__stdcall *CreateDevice)(IDirectInput2A *This, const GUID *const, LPDIRECTINPUTDEVICEA *, LPUNKNOWN);
  HRESULT (__stdcall *EnumDevices)(IDirectInput2A *This, DWORD, LPDIENUMDEVICESCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetDeviceStatus)(IDirectInput2A *This, const GUID *const);
  HRESULT (__stdcall *RunControlPanel)(IDirectInput2A *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInput2A *This, HINSTANCE, DWORD);
  HRESULT (__stdcall *FindDevice)(IDirectInput2A *This, const GUID *const, LPCSTR, LPGUID);
};

/* 349 */
struct IDirectInput2A
{
  IDirectInput2AVtbl *lpVtbl;
};

/* 353 */
typedef const WCHAR *LPCWSTR;

/* 351 */
struct IDirectInput2WVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInput2W *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInput2W *This);
  ULONG (__stdcall *Release)(IDirectInput2W *This);
  HRESULT (__stdcall *CreateDevice)(IDirectInput2W *This, const GUID *const, LPDIRECTINPUTDEVICEW *, LPUNKNOWN);
  HRESULT (__stdcall *EnumDevices)(IDirectInput2W *This, DWORD, LPDIENUMDEVICESCALLBACKW, LPVOID, DWORD);
  HRESULT (__stdcall *GetDeviceStatus)(IDirectInput2W *This, const GUID *const);
  HRESULT (__stdcall *RunControlPanel)(IDirectInput2W *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInput2W *This, HINSTANCE, DWORD);
  HRESULT (__stdcall *FindDevice)(IDirectInput2W *This, const GUID *const, LPCWSTR, LPGUID);
};

/* 352 */
struct IDirectInput2W
{
  IDirectInput2WVtbl *lpVtbl;
};

/* 356 */
typedef const DIEFFECT *LPCDIEFFECT;

/* 360 */
typedef IDirectInputEffect *LPDIRECTINPUTEFFECT;

/* 367 */
typedef const DIEFFECTINFOA *LPCDIEFFECTINFOA;

/* 366 */
typedef BOOL (__stdcall *LPDIENUMEFFECTSCALLBACKA)(LPCDIEFFECTINFOA, LPVOID);

/* 369 */
typedef DIEFFECTINFOA *LPDIEFFECTINFOA;

/* 370 */
typedef BOOL (__stdcall *LPDIENUMCREATEDEFFECTOBJECTSCALLBACK)(LPDIRECTINPUTEFFECT, LPVOID);

/* 364 */
typedef DIEFFESCAPE *LPDIEFFESCAPE;

/* 371 */
typedef const DIDEVICEOBJECTDATA *LPCDIDEVICEOBJECTDATA;

/* 354 */
struct IDirectInputDevice2AVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputDevice2A *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputDevice2A *This);
  ULONG (__stdcall *Release)(IDirectInputDevice2A *This);
  HRESULT (__stdcall *GetCapabilities)(IDirectInputDevice2A *This, LPDIDEVCAPS);
  HRESULT (__stdcall *EnumObjects)(IDirectInputDevice2A *This, LPDIENUMDEVICEOBJECTSCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetProperty)(IDirectInputDevice2A *This, const GUID *const, LPDIPROPHEADER);
  HRESULT (__stdcall *SetProperty)(IDirectInputDevice2A *This, const GUID *const, LPCDIPROPHEADER);
  HRESULT (__stdcall *Acquire)(IDirectInputDevice2A *This);
  HRESULT (__stdcall *Unacquire)(IDirectInputDevice2A *This);
  HRESULT (__stdcall *GetDeviceState)(IDirectInputDevice2A *This, DWORD, LPVOID);
  HRESULT (__stdcall *GetDeviceData)(IDirectInputDevice2A *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);
  HRESULT (__stdcall *SetDataFormat)(IDirectInputDevice2A *This, LPCDIDATAFORMAT);
  HRESULT (__stdcall *SetEventNotification)(IDirectInputDevice2A *This, HANDLE);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDevice2A *This, HWND, DWORD);
  HRESULT (__stdcall *GetObjectInfo)(IDirectInputDevice2A *This, LPDIDEVICEOBJECTINSTANCEA, DWORD, DWORD);
  HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDevice2A *This, LPDIDEVICEINSTANCEA);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputDevice2A *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputDevice2A *This, HINSTANCE, DWORD, const GUID *const);
  HRESULT (__stdcall *CreateEffect)(IDirectInputDevice2A *This, const GUID *const, LPCDIEFFECT, LPDIRECTINPUTEFFECT *, LPUNKNOWN);
  HRESULT (__stdcall *EnumEffects)(IDirectInputDevice2A *This, LPDIENUMEFFECTSCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetEffectInfo)(IDirectInputDevice2A *This, LPDIEFFECTINFOA, const GUID *const);
  HRESULT (__stdcall *GetForceFeedbackState)(IDirectInputDevice2A *This, LPDWORD);
  HRESULT (__stdcall *SendForceFeedbackCommand)(IDirectInputDevice2A *This, DWORD);
  HRESULT (__stdcall *EnumCreatedEffectObjects)(IDirectInputDevice2A *This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, LPVOID, DWORD);
  HRESULT (__stdcall *Escape)(IDirectInputDevice2A *This, LPDIEFFESCAPE);
  HRESULT (__stdcall *Poll)(IDirectInputDevice2A *This);
  HRESULT (__stdcall *SendDeviceData)(IDirectInputDevice2A *This, DWORD, LPCDIDEVICEOBJECTDATA, LPDWORD, DWORD);
};

/* 355 */
struct IDirectInputDevice2A
{
  IDirectInputDevice2AVtbl *lpVtbl;
};

/* 358 */
typedef DIENVELOPE *LPDIENVELOPE;

/* 357 */
struct DIEFFECT
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwDuration;
  DWORD dwSamplePeriod;
  DWORD dwGain;
  DWORD dwTriggerButton;
  DWORD dwTriggerRepeatInterval;
  DWORD cAxes;
  LPDWORD rgdwAxes;
  LPLONG rglDirection;
  LPDIENVELOPE lpEnvelope;
  DWORD cbTypeSpecificParams;
  LPVOID lpvTypeSpecificParams;
  DWORD dwStartDelay;
};

/* 361 */
struct IDirectInputEffect
{
  IDirectInputEffectVtbl *lpVtbl;
};

/* 368 */
struct DIEFFECTINFOA
{
  DWORD dwSize;
  GUID guid;
  DWORD dwEffType;
  DWORD dwStaticParams;
  DWORD dwDynamicParams;
  CHAR tszName[260];
};

/* 365 */
struct DIEFFESCAPE
{
  DWORD dwSize;
  DWORD dwCommand;
  LPVOID lpvInBuffer;
  DWORD cbInBuffer;
  LPVOID lpvOutBuffer;
  DWORD cbOutBuffer;
};

/* 359 */
struct DIENVELOPE
{
  DWORD dwSize;
  DWORD dwAttackLevel;
  DWORD dwAttackTime;
  DWORD dwFadeLevel;
  DWORD dwFadeTime;
};

/* 363 */
typedef DIEFFECT *LPDIEFFECT;

/* 362 */
struct IDirectInputEffectVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputEffect *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputEffect *This);
  ULONG (__stdcall *Release)(IDirectInputEffect *This);
  HRESULT (__stdcall *Initialize)(IDirectInputEffect *This, HINSTANCE, DWORD, const GUID *const);
  HRESULT (__stdcall *GetEffectGuid)(IDirectInputEffect *This, LPGUID);
  HRESULT (__stdcall *GetParameters)(IDirectInputEffect *This, LPDIEFFECT, DWORD);
  HRESULT (__stdcall *SetParameters)(IDirectInputEffect *This, LPCDIEFFECT, DWORD);
  HRESULT (__stdcall *Start)(IDirectInputEffect *This, DWORD, DWORD);
  HRESULT (__stdcall *Stop)(IDirectInputEffect *This);
  HRESULT (__stdcall *GetEffectStatus)(IDirectInputEffect *This, LPDWORD);
  HRESULT (__stdcall *Download)(IDirectInputEffect *This);
  HRESULT (__stdcall *Unload)(IDirectInputEffect *This);
  HRESULT (__stdcall *Escape)(IDirectInputEffect *This, LPDIEFFESCAPE);
};

/* 375 */
typedef const DIEFFECTINFOW *LPCDIEFFECTINFOW;

/* 374 */
typedef BOOL (__stdcall *LPDIENUMEFFECTSCALLBACKW)(LPCDIEFFECTINFOW, LPVOID);

/* 377 */
typedef DIEFFECTINFOW *LPDIEFFECTINFOW;

/* 372 */
struct IDirectInputDevice2WVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputDevice2W *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputDevice2W *This);
  ULONG (__stdcall *Release)(IDirectInputDevice2W *This);
  HRESULT (__stdcall *GetCapabilities)(IDirectInputDevice2W *This, LPDIDEVCAPS);
  HRESULT (__stdcall *EnumObjects)(IDirectInputDevice2W *This, LPDIENUMDEVICEOBJECTSCALLBACKW, LPVOID, DWORD);
  HRESULT (__stdcall *GetProperty)(IDirectInputDevice2W *This, const GUID *const, LPDIPROPHEADER);
  HRESULT (__stdcall *SetProperty)(IDirectInputDevice2W *This, const GUID *const, LPCDIPROPHEADER);
  HRESULT (__stdcall *Acquire)(IDirectInputDevice2W *This);
  HRESULT (__stdcall *Unacquire)(IDirectInputDevice2W *This);
  HRESULT (__stdcall *GetDeviceState)(IDirectInputDevice2W *This, DWORD, LPVOID);
  HRESULT (__stdcall *GetDeviceData)(IDirectInputDevice2W *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);
  HRESULT (__stdcall *SetDataFormat)(IDirectInputDevice2W *This, LPCDIDATAFORMAT);
  HRESULT (__stdcall *SetEventNotification)(IDirectInputDevice2W *This, HANDLE);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDevice2W *This, HWND, DWORD);
  HRESULT (__stdcall *GetObjectInfo)(IDirectInputDevice2W *This, LPDIDEVICEOBJECTINSTANCEW, DWORD, DWORD);
  HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDevice2W *This, LPDIDEVICEINSTANCEW);
  HRESULT (__stdcall *RunControlPanel)(IDirectInputDevice2W *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputDevice2W *This, HINSTANCE, DWORD, const GUID *const);
  HRESULT (__stdcall *CreateEffect)(IDirectInputDevice2W *This, const GUID *const, LPCDIEFFECT, LPDIRECTINPUTEFFECT *, LPUNKNOWN);
  HRESULT (__stdcall *EnumEffects)(IDirectInputDevice2W *This, LPDIENUMEFFECTSCALLBACKW, LPVOID, DWORD);
  HRESULT (__stdcall *GetEffectInfo)(IDirectInputDevice2W *This, LPDIEFFECTINFOW, const GUID *const);
  HRESULT (__stdcall *GetForceFeedbackState)(IDirectInputDevice2W *This, LPDWORD);
  HRESULT (__stdcall *SendForceFeedbackCommand)(IDirectInputDevice2W *This, DWORD);
  HRESULT (__stdcall *EnumCreatedEffectObjects)(IDirectInputDevice2W *This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, LPVOID, DWORD);
  HRESULT (__stdcall *Escape)(IDirectInputDevice2W *This, LPDIEFFESCAPE);
  HRESULT (__stdcall *Poll)(IDirectInputDevice2W *This);
  HRESULT (__stdcall *SendDeviceData)(IDirectInputDevice2W *This, DWORD, LPCDIDEVICEOBJECTDATA, LPDWORD, DWORD);
};

/* 373 */
struct IDirectInputDevice2W
{
  IDirectInputDevice2WVtbl *lpVtbl;
};

/* 376 */
struct DIEFFECTINFOW
{
  DWORD dwSize;
  GUID guid;
  DWORD dwEffType;
  DWORD dwStaticParams;
  DWORD dwDynamicParams;
  WCHAR tszName[260];
};

/* 381 */
typedef _DSBUFFERDESC DSBUFFERDESC;

/* 380 */
typedef const DSBUFFERDESC *LPCDSBUFFERDESC;

/* 385 */
typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

/* 393 */
typedef _DSCAPS *LPDSCAPS;

/* 395 */
typedef const GUID *LPCGUID;

/* 378 */
struct IDirectSoundVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSound *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSound *This);
  ULONG (__stdcall *Release)(IDirectSound *This);
  HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *This, LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter);
  HRESULT (__stdcall *GetCaps)(IDirectSound *This, LPDSCAPS pDSCaps);
  HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *This, LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate);
  HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *This, HWND hwnd, DWORD dwLevel);
  HRESULT (__stdcall *Compact)(IDirectSound *This);
  HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *This, LPDWORD pdwSpeakerConfig);
  HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *This, DWORD dwSpeakerConfig);
  HRESULT (__stdcall *Initialize)(IDirectSound *This, LPCGUID pcGuidDevice);
};

/* 379 */
struct IDirectSound
{
  IDirectSoundVtbl *lpVtbl;
};

/* 383 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 382 */
struct _DSBUFFERDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwBufferBytes;
  DWORD dwReserved;
  LPWAVEFORMATEX lpwfxFormat;
  GUID guid3DAlgorithm;
};

/* 386 */
struct IDirectSoundBuffer
{
  IDirectSoundBufferVtbl *lpVtbl;
};

/* 394 */
struct _DSCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwMinSecondarySampleRate;
  DWORD dwMaxSecondarySampleRate;
  DWORD dwPrimaryBuffers;
  DWORD dwMaxHwMixingAllBuffers;
  DWORD dwMaxHwMixingStaticBuffers;
  DWORD dwMaxHwMixingStreamingBuffers;
  DWORD dwFreeHwMixingAllBuffers;
  DWORD dwFreeHwMixingStaticBuffers;
  DWORD dwFreeHwMixingStreamingBuffers;
  DWORD dwMaxHw3DAllBuffers;
  DWORD dwMaxHw3DStaticBuffers;
  DWORD dwMaxHw3DStreamingBuffers;
  DWORD dwFreeHw3DAllBuffers;
  DWORD dwFreeHw3DStaticBuffers;
  DWORD dwFreeHw3DStreamingBuffers;
  DWORD dwTotalHwMemBytes;
  DWORD dwFreeHwMemBytes;
  DWORD dwMaxContigFreeHwMemBytes;
  DWORD dwUnlockTransferRateHwBuffers;
  DWORD dwPlayCpuOverheadSwBuffers;
  DWORD dwReserved1;
  DWORD dwReserved2;
};

/* 384 */
#pragma pack(push, 1)
struct tWAVEFORMATEX
{
  WORD wFormatTag;
  WORD nChannels;
  DWORD nSamplesPerSec;
  DWORD nAvgBytesPerSec;
  WORD nBlockAlign;
  WORD wBitsPerSample;
  WORD cbSize;
};
#pragma pack(pop)

/* 388 */
typedef _DSBCAPS *LPDSBCAPS;

/* 390 */
typedef IDirectSound *LPDIRECTSOUND;

/* 392 */
typedef tWAVEFORMATEX WAVEFORMATEX;

/* 391 */
typedef const WAVEFORMATEX *LPCWAVEFORMATEX;

/* 387 */
struct IDirectSoundBufferVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSoundBuffer *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSoundBuffer *This);
  ULONG (__stdcall *Release)(IDirectSoundBuffer *This);
  HRESULT (__stdcall *GetCaps)(IDirectSoundBuffer *This, LPDSBCAPS pDSBufferCaps);
  HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundBuffer *This, LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor);
  HRESULT (__stdcall *GetFormat)(IDirectSoundBuffer *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);
  HRESULT (__stdcall *GetVolume)(IDirectSoundBuffer *This, LPLONG plVolume);
  HRESULT (__stdcall *GetPan)(IDirectSoundBuffer *This, LPLONG plPan);
  HRESULT (__stdcall *GetFrequency)(IDirectSoundBuffer *This, LPDWORD pdwFrequency);
  HRESULT (__stdcall *GetStatus)(IDirectSoundBuffer *This, LPDWORD pdwStatus);
  HRESULT (__stdcall *Initialize)(IDirectSoundBuffer *This, LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc);
  HRESULT (__stdcall *Lock)(IDirectSoundBuffer *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);
  HRESULT (__stdcall *Play)(IDirectSoundBuffer *This, DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags);
  HRESULT (__stdcall *SetCurrentPosition)(IDirectSoundBuffer *This, DWORD dwNewPosition);
  HRESULT (__stdcall *SetFormat)(IDirectSoundBuffer *This, LPCWAVEFORMATEX pcfxFormat);
  HRESULT (__stdcall *SetVolume)(IDirectSoundBuffer *This, LONG lVolume);
  HRESULT (__stdcall *SetPan)(IDirectSoundBuffer *This, LONG lPan);
  HRESULT (__stdcall *SetFrequency)(IDirectSoundBuffer *This, DWORD dwFrequency);
  HRESULT (__stdcall *Stop)(IDirectSoundBuffer *This);
  HRESULT (__stdcall *Unlock)(IDirectSoundBuffer *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);
  HRESULT (__stdcall *Restore)(IDirectSoundBuffer *This);
};

/* 389 */
struct _DSBCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwBufferBytes;
  DWORD dwUnlockTransferRate;
  DWORD dwPlayCpuOverhead;
};

/* 398 */
typedef _DS3DLISTENER *LPDS3DLISTENER;

/* 402 */
typedef float D3DVALUE;

/* 400 */
typedef _D3DVECTOR D3DVECTOR;

/* 404 */
typedef _DS3DLISTENER DS3DLISTENER;

/* 403 */
typedef const DS3DLISTENER *LPCDS3DLISTENER;

/* 396 */
struct IDirectSound3DListenerVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSound3DListener *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSound3DListener *This);
  ULONG (__stdcall *Release)(IDirectSound3DListener *This);
  HRESULT (__stdcall *GetAllParameters)(IDirectSound3DListener *This, LPDS3DLISTENER pListener);
  HRESULT (__stdcall *GetDistanceFactor)(IDirectSound3DListener *This, D3DVALUE *pflDistanceFactor);
  HRESULT (__stdcall *GetDopplerFactor)(IDirectSound3DListener *This, D3DVALUE *pflDopplerFactor);
  HRESULT (__stdcall *GetOrientation)(IDirectSound3DListener *This, D3DVECTOR *pvOrientFront, D3DVECTOR *pvOrientTop);
  HRESULT (__stdcall *GetPosition)(IDirectSound3DListener *This, D3DVECTOR *pvPosition);
  HRESULT (__stdcall *GetRolloffFactor)(IDirectSound3DListener *This, D3DVALUE *pflRolloffFactor);
  HRESULT (__stdcall *GetVelocity)(IDirectSound3DListener *This, D3DVECTOR *pvVelocity);
  HRESULT (__stdcall *SetAllParameters)(IDirectSound3DListener *This, LPCDS3DLISTENER pcListener, DWORD dwApply);
  HRESULT (__stdcall *SetDistanceFactor)(IDirectSound3DListener *This, D3DVALUE flDistanceFactor, DWORD dwApply);
  HRESULT (__stdcall *SetDopplerFactor)(IDirectSound3DListener *This, D3DVALUE flDopplerFactor, DWORD dwApply);
  HRESULT (__stdcall *SetOrientation)(IDirectSound3DListener *This, D3DVALUE xFront, D3DVALUE yFront, D3DVALUE zFront, D3DVALUE xTop, D3DVALUE yTop, D3DVALUE zTop, DWORD dwApply);
  HRESULT (__stdcall *SetPosition)(IDirectSound3DListener *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);
  HRESULT (__stdcall *SetRolloffFactor)(IDirectSound3DListener *This, D3DVALUE flRolloffFactor, DWORD dwApply);
  HRESULT (__stdcall *SetVelocity)(IDirectSound3DListener *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);
  HRESULT (__stdcall *CommitDeferredSettings)(IDirectSound3DListener *This);
};

/* 397 */
struct IDirectSound3DListener
{
  IDirectSound3DListenerVtbl *lpVtbl;
};

/* 401 */
struct _D3DVECTOR
{
  float x;
  float y;
  float z;
};

/* 399 */
struct _DS3DLISTENER
{
  DWORD dwSize;
  D3DVECTOR vPosition;
  D3DVECTOR vVelocity;
  D3DVECTOR vOrientFront;
  D3DVECTOR vOrientTop;
  D3DVALUE flDistanceFactor;
  D3DVALUE flRolloffFactor;
  D3DVALUE flDopplerFactor;
};

/* 407 */
typedef _DS3DBUFFER *LPDS3DBUFFER;

/* 410 */
typedef _DS3DBUFFER DS3DBUFFER;

/* 409 */
typedef const DS3DBUFFER *LPCDS3DBUFFER;

/* 405 */
struct IDirectSound3DBufferVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSound3DBuffer *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSound3DBuffer *This);
  ULONG (__stdcall *Release)(IDirectSound3DBuffer *This);
  HRESULT (__stdcall *GetAllParameters)(IDirectSound3DBuffer *This, LPDS3DBUFFER pDs3dBuffer);
  HRESULT (__stdcall *GetConeAngles)(IDirectSound3DBuffer *This, LPDWORD pdwInsideConeAngle, LPDWORD pdwOutsideConeAngle);
  HRESULT (__stdcall *GetConeOrientation)(IDirectSound3DBuffer *This, D3DVECTOR *pvOrientation);
  HRESULT (__stdcall *GetConeOutsideVolume)(IDirectSound3DBuffer *This, LPLONG plConeOutsideVolume);
  HRESULT (__stdcall *GetMaxDistance)(IDirectSound3DBuffer *This, D3DVALUE *pflMaxDistance);
  HRESULT (__stdcall *GetMinDistance)(IDirectSound3DBuffer *This, D3DVALUE *pflMinDistance);
  HRESULT (__stdcall *GetMode)(IDirectSound3DBuffer *This, LPDWORD pdwMode);
  HRESULT (__stdcall *GetPosition)(IDirectSound3DBuffer *This, D3DVECTOR *pvPosition);
  HRESULT (__stdcall *GetVelocity)(IDirectSound3DBuffer *This, D3DVECTOR *pvVelocity);
  HRESULT (__stdcall *SetAllParameters)(IDirectSound3DBuffer *This, LPCDS3DBUFFER pcDs3dBuffer, DWORD dwApply);
  HRESULT (__stdcall *SetConeAngles)(IDirectSound3DBuffer *This, DWORD dwInsideConeAngle, DWORD dwOutsideConeAngle, DWORD dwApply);
  HRESULT (__stdcall *SetConeOrientation)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);
  HRESULT (__stdcall *SetConeOutsideVolume)(IDirectSound3DBuffer *This, LONG lConeOutsideVolume, DWORD dwApply);
  HRESULT (__stdcall *SetMaxDistance)(IDirectSound3DBuffer *This, D3DVALUE flMaxDistance, DWORD dwApply);
  HRESULT (__stdcall *SetMinDistance)(IDirectSound3DBuffer *This, D3DVALUE flMinDistance, DWORD dwApply);
  HRESULT (__stdcall *SetMode)(IDirectSound3DBuffer *This, DWORD dwMode, DWORD dwApply);
  HRESULT (__stdcall *SetPosition)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);
  HRESULT (__stdcall *SetVelocity)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);
};

/* 406 */
struct IDirectSound3DBuffer
{
  IDirectSound3DBufferVtbl *lpVtbl;
};

/* 408 */
struct _DS3DBUFFER
{
  DWORD dwSize;
  D3DVECTOR vPosition;
  D3DVECTOR vVelocity;
  DWORD dwInsideConeAngle;
  DWORD dwOutsideConeAngle;
  D3DVECTOR vConeOrientation;
  LONG lConeOutsideVolume;
  D3DVALUE flMinDistance;
  D3DVALUE flMaxDistance;
  DWORD dwMode;
};

/* 414 */
typedef _DSCBUFFERDESC DSCBUFFERDESC;

/* 413 */
typedef const DSCBUFFERDESC *LPCDSCBUFFERDESC;

/* 418 */
typedef IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;

/* 424 */
typedef _DSCCAPS *LPDSCCAPS;

/* 411 */
struct IDirectSoundCaptureVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSoundCapture *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSoundCapture *This);
  ULONG (__stdcall *Release)(IDirectSoundCapture *This);
  HRESULT (__stdcall *CreateCaptureBuffer)(IDirectSoundCapture *This, LPCDSCBUFFERDESC pcDSCBufferDesc, LPDIRECTSOUNDCAPTUREBUFFER *ppDSCBuffer, LPUNKNOWN pUnkOuter);
  HRESULT (__stdcall *GetCaps)(IDirectSoundCapture *This, LPDSCCAPS pDSCCaps);
  HRESULT (__stdcall *Initialize)(IDirectSoundCapture *This, LPCGUID pcGuidDevice);
};

/* 412 */
struct IDirectSoundCapture
{
  IDirectSoundCaptureVtbl *lpVtbl;
};

/* 416 */
typedef _DSCEFFECTDESC *LPDSCEFFECTDESC;

/* 415 */
struct _DSCBUFFERDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwBufferBytes;
  DWORD dwReserved;
  LPWAVEFORMATEX lpwfxFormat;
  DWORD dwFXCount;
  LPDSCEFFECTDESC lpDSCFXDesc;
};

/* 419 */
struct IDirectSoundCaptureBuffer
{
  IDirectSoundCaptureBufferVtbl *lpVtbl;
};

/* 425 */
struct _DSCCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwFormats;
  DWORD dwChannels;
};

/* 417 */
struct _DSCEFFECTDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  GUID guidDSCFXClass;
  GUID guidDSCFXInstance;
  DWORD dwReserved1;
  DWORD dwReserved2;
};

/* 421 */
typedef _DSCBCAPS *LPDSCBCAPS;

/* 423 */
typedef IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;

/* 420 */
struct IDirectSoundCaptureBufferVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSoundCaptureBuffer *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSoundCaptureBuffer *This);
  ULONG (__stdcall *Release)(IDirectSoundCaptureBuffer *This);
  HRESULT (__stdcall *GetCaps)(IDirectSoundCaptureBuffer *This, LPDSCBCAPS pDSCBCaps);
  HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundCaptureBuffer *This, LPDWORD pdwCapturePosition, LPDWORD pdwReadPosition);
  HRESULT (__stdcall *GetFormat)(IDirectSoundCaptureBuffer *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);
  HRESULT (__stdcall *GetStatus)(IDirectSoundCaptureBuffer *This, LPDWORD pdwStatus);
  HRESULT (__stdcall *Initialize)(IDirectSoundCaptureBuffer *This, LPDIRECTSOUNDCAPTURE pDirectSoundCapture, LPCDSCBUFFERDESC pcDSCBufferDesc);
  HRESULT (__stdcall *Lock)(IDirectSoundCaptureBuffer *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);
  HRESULT (__stdcall *Start)(IDirectSoundCaptureBuffer *This, DWORD dwFlags);
  HRESULT (__stdcall *Stop)(IDirectSoundCaptureBuffer *This);
  HRESULT (__stdcall *Unlock)(IDirectSoundCaptureBuffer *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);
};

/* 422 */
struct _DSCBCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwBufferBytes;
  DWORD dwReserved;
};

/* 429 */
typedef _DSBPOSITIONNOTIFY DSBPOSITIONNOTIFY;

/* 428 */
typedef const DSBPOSITIONNOTIFY *LPCDSBPOSITIONNOTIFY;

/* 426 */
struct IDirectSoundNotifyVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSoundNotify *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSoundNotify *This);
  ULONG (__stdcall *Release)(IDirectSoundNotify *This);
  HRESULT (__stdcall *SetNotificationPositions)(IDirectSoundNotify *This, DWORD dwPositionNotifies, LPCDSBPOSITIONNOTIFY pcPositionNotifies);
};

/* 427 */
struct IDirectSoundNotify
{
  IDirectSoundNotifyVtbl *lpVtbl;
};

/* 430 */
struct _DSBPOSITIONNOTIFY
{
  DWORD dwOffset;
  HANDLE hEventNotify;
};

/* 433 */
typedef ULONG *PULONG;

/* 431 */
struct IKsPropertySetVtbl
{
  HRESULT (__stdcall *QueryInterface)(IKsPropertySet *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IKsPropertySet *This);
  ULONG (__stdcall *Release)(IKsPropertySet *This);
  HRESULT (__stdcall *Get)(IKsPropertySet *This, const GUID *const rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength, LPVOID pPropertyData, ULONG ulDataLength, PULONG pulBytesReturned);
  HRESULT (__stdcall *Set)(IKsPropertySet *This, const GUID *const rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength, LPVOID pPropertyData, ULONG ulDataLength);
  HRESULT (__stdcall *QuerySupport)(IKsPropertySet *This, const GUID *const rguidPropSet, ULONG ulId, PULONG pulTypeSupport);
};

/* 432 */
struct IKsPropertySet
{
  IKsPropertySetVtbl *lpVtbl;
};

/* 436 */
typedef LONGLONG REFERENCE_TIME;

/* 434 */
struct IReferenceClockVtbl
{
  HRESULT (__stdcall *QueryInterface)(IReferenceClock *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IReferenceClock *This);
  ULONG (__stdcall *Release)(IReferenceClock *This);
  HRESULT (__stdcall *GetTime)(IReferenceClock *This, REFERENCE_TIME *pTime);
  HRESULT (__stdcall *AdviseTime)(IReferenceClock *This, REFERENCE_TIME rtBaseTime, REFERENCE_TIME rtStreamTime, HANDLE hEvent, LPDWORD pdwAdviseCookie);
  HRESULT (__stdcall *AdvisePeriodic)(IReferenceClock *This, REFERENCE_TIME rtStartTime, REFERENCE_TIME rtPeriodTime, HANDLE hSemaphore, LPDWORD pdwAdviseCookie);
  HRESULT (__stdcall *Unadvise)(IReferenceClock *This, DWORD dwAdviseCookie);
};

/* 435 */
struct IReferenceClock
{
  IReferenceClockVtbl *lpVtbl;
};

/* 440 */
typedef $117E3A994AEBF040E18388CACE709509 KSIDENTIFIER;

/* 439 */
typedef KSIDENTIFIER *PKSPROPERTY;

/* 444 */
typedef KSIDENTIFIER *PKSMETHOD;

/* 445 */
typedef KSIDENTIFIER *PKSEVENT;

/* 437 */
struct IKsControlVtbl
{
  HRESULT (__stdcall *QueryInterface)(IKsControl *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IKsControl *This);
  ULONG (__stdcall *Release)(IKsControl *This);
  HRESULT (__stdcall *KsProperty)(IKsControl *This, PKSPROPERTY Property, ULONG PropertyLength, void *PropertyData, ULONG DataLength, ULONG *BytesReturned);
  HRESULT (__stdcall *KsMethod)(IKsControl *This, PKSMETHOD Method, ULONG MethodLength, void *MethodData, ULONG DataLength, ULONG *BytesReturned);
  HRESULT (__stdcall *KsEvent)(IKsControl *This, PKSEVENT Event, ULONG EventLength, void *EventData, ULONG DataLength, ULONG *BytesReturned);
};

/* 438 */
struct IKsControl
{
  IKsControlVtbl *lpVtbl;
};

/* 443 */
struct $::$F044539147C377D1A0F579F3A4EAC6A7::$8DB12206A787E12F5CB68E9C5F8D04FA
{
  GUID Set;
  ULONG Id;
  ULONG Flags;
};

/* 442 */
union $117E3A994AEBF040E18388CACE709509::$F044539147C377D1A0F579F3A4EAC6A7
{
  struct
  {
    GUID Set;
    ULONG Id;
    ULONG Flags;
  };
  LONGLONG Alignment;
};

/* 441 */
struct $117E3A994AEBF040E18388CACE709509
{
  union
  {
    struct
    {
      GUID Set;
      ULONG Id;
      ULONG Flags;
    };
    LONGLONG Alignment;
  };
};

/* 448 */
typedef REFERENCE_TIME *LPREFERENCE_TIME;

/* 446 */
#pragma pack(push, 8)
struct IDirectMusicBufferVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicBuffer *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicBuffer *This);
  ULONG (__stdcall *Release)(IDirectMusicBuffer *This);
  HRESULT (__stdcall *Flush)(IDirectMusicBuffer *This);
  HRESULT (__stdcall *TotalTime)(IDirectMusicBuffer *This, LPREFERENCE_TIME prtTime);
  HRESULT (__stdcall *PackStructured)(IDirectMusicBuffer *This, REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD dwChannelMessage);
  HRESULT (__stdcall *PackUnstructured)(IDirectMusicBuffer *This, REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD cb, LPBYTE lpb);
  HRESULT (__stdcall *ResetReadPtr)(IDirectMusicBuffer *This);
  HRESULT (__stdcall *GetNextEvent)(IDirectMusicBuffer *This, LPREFERENCE_TIME prt, LPDWORD pdwChannelGroup, LPDWORD pdwLength, LPBYTE *ppData);
  HRESULT (__stdcall *GetRawBufferPtr)(IDirectMusicBuffer *This, LPBYTE *ppData);
  HRESULT (__stdcall *GetStartTime)(IDirectMusicBuffer *This, LPREFERENCE_TIME prt);
  HRESULT (__stdcall *GetUsedBytes)(IDirectMusicBuffer *This, LPDWORD pcb);
  HRESULT (__stdcall *GetMaxBytes)(IDirectMusicBuffer *This, LPDWORD pcb);
  HRESULT (__stdcall *GetBufferFormat)(IDirectMusicBuffer *This, LPGUID pGuidFormat);
  HRESULT (__stdcall *SetStartTime)(IDirectMusicBuffer *This, REFERENCE_TIME rt);
  HRESULT (__stdcall *SetUsedBytes)(IDirectMusicBuffer *This, DWORD cb);
};
#pragma pack(pop)

/* 447 */
#pragma pack(push, 8)
struct IDirectMusicBuffer
{
  IDirectMusicBufferVtbl *lpVtbl;
};
#pragma pack(pop)

/* 449 */
#pragma pack(push, 8)
struct IDirectMusicPortDownloadVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicPortDownload *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicPortDownload *This);
  ULONG (__stdcall *Release)(IDirectMusicPortDownload *This);
  HRESULT (__stdcall *GetBuffer)(IDirectMusicPortDownload *This, DWORD dwDLId, IDirectMusicDownload **ppIDMDownload);
  HRESULT (__stdcall *AllocateBuffer)(IDirectMusicPortDownload *This, DWORD dwSize, IDirectMusicDownload **ppIDMDownload);
  HRESULT (__stdcall *GetDLId)(IDirectMusicPortDownload *This, DWORD *pdwStartDLId, DWORD dwCount);
  HRESULT (__stdcall *GetAppend)(IDirectMusicPortDownload *This, DWORD *pdwAppend);
  HRESULT (__stdcall *Download)(IDirectMusicPortDownload *This, IDirectMusicDownload *pIDMDownload);
  HRESULT (__stdcall *Unload)(IDirectMusicPortDownload *This, IDirectMusicDownload *pIDMDownload);
};
#pragma pack(pop)

/* 450 */
#pragma pack(push, 8)
struct IDirectMusicPortDownload
{
  IDirectMusicPortDownloadVtbl *lpVtbl;
};
#pragma pack(pop)

/* 451 */
#pragma pack(push, 8)
struct IDirectMusicDownload
{
  IDirectMusicDownloadVtbl *lpVtbl;
};
#pragma pack(pop)

/* 452 */
#pragma pack(push, 8)
struct IDirectMusicDownloadVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicDownload *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicDownload *This);
  ULONG (__stdcall *Release)(IDirectMusicDownload *This);
  HRESULT (__stdcall *GetBuffer)(IDirectMusicDownload *This, void **ppvBuffer, DWORD *pdwSize);
};
#pragma pack(pop)

/* 457 */
typedef WCHAR *LPWSTR;

/* 453 */
#pragma pack(push, 8)
struct IDirectMusicCollectionVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicCollection *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicCollection *This);
  ULONG (__stdcall *Release)(IDirectMusicCollection *This);
  HRESULT (__stdcall *GetInstrument)(IDirectMusicCollection *This, DWORD dwPatch, IDirectMusicInstrument **ppInstrument);
  HRESULT (__stdcall *EnumInstrument)(IDirectMusicCollection *This, DWORD dwIndex, DWORD *pdwPatch, LPWSTR pwszName, DWORD dwNameLen);
};
#pragma pack(pop)

/* 454 */
#pragma pack(push, 8)
struct IDirectMusicCollection
{
  IDirectMusicCollectionVtbl *lpVtbl;
};
#pragma pack(pop)

/* 455 */
#pragma pack(push, 8)
struct IDirectMusicInstrument
{
  IDirectMusicInstrumentVtbl *lpVtbl;
};
#pragma pack(pop)

/* 456 */
#pragma pack(push, 8)
struct IDirectMusicInstrumentVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicInstrument *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicInstrument *This);
  ULONG (__stdcall *Release)(IDirectMusicInstrument *This);
  HRESULT (__stdcall *GetPatch)(IDirectMusicInstrument *This, DWORD *pdwPatch);
  HRESULT (__stdcall *SetPatch)(IDirectMusicInstrument *This, DWORD dwPatch);
};
#pragma pack(pop)

/* 458 */
#pragma pack(push, 8)
struct IDirectMusicDownloadedInstrumentVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectMusicDownloadedInstrument *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectMusicDownloadedInstrument *This);
  ULONG (__stdcall *Release)(IDirectMusicDownloadedInstrument *This);
};
#pragma pack(pop)

/* 459 */
#pragma pack(push, 8)
struct IDirectMusicDownloadedInstrument
{
  IDirectMusicDownloadedInstrumentVtbl *lpVtbl;
};
#pragma pack(pop)

/* 469 */
typedef _D3DDeviceDesc D3DDEVICEDESC;

/* 487 */
typedef struct IDirect3DDevice2 *LPDIRECT3DDEVICE2;

/* 461 */
struct IDirect3D2Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirect3D2 *This, const IID *const, LPVOID *);
  ULONG (__stdcall *AddRef)(IDirect3D2 *This);
  ULONG (__stdcall *Release)(IDirect3D2 *This);
  int (__stdcall *EnumDevices)(IDirect3D2 *, int (__stdcall *)(GUID *, LPSTR, LPSTR, D3DDEVICEDESC *, D3DDEVICEDESC *, LPVOID), int *);
  int CreateLight;
  int CreateMaterial;
  int (__stdcall *CreateViewport)(IDirect3D2 *, struct IDirect3DViewport2 **, IUnknown *);
  int FindDevice;
  HRESULT (__stdcall *CreateDevice)(IDirect3D2 *, IID *, LPDIRECTDRAWSURFACE, LPDIRECT3DDEVICE2 *);
};

/* 462 */
struct IDirect3D2
{
  IDirect3D2Vtbl *lpVtbl;
};

/* 471 */
typedef DWORD D3DCOLORMODEL;

/* 473 */
#pragma pack(push, 4)
struct _D3DTRANSFORMCAPS
{
  DWORD dwSize;
  DWORD dwCaps;
};
#pragma pack(pop)

/* 472 */
typedef _D3DTRANSFORMCAPS D3DTRANSFORMCAPS;

/* 475 */
#pragma pack(push, 4)
struct _D3DLIGHTINGCAPS
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwLightingModel;
  DWORD dwNumLights;
};
#pragma pack(pop)

/* 474 */
typedef _D3DLIGHTINGCAPS D3DLIGHTINGCAPS;

/* 477 */
#pragma pack(push, 4)
struct _D3DPrimCaps
{
  DWORD dwSize;
  DWORD dwMiscCaps;
  DWORD dwRasterCaps;
  DWORD dwZCmpCaps;
  DWORD dwSrcBlendCaps;
  DWORD dwDestBlendCaps;
  DWORD dwAlphaCmpCaps;
  DWORD dwShadeCaps;
  DWORD dwTextureCaps;
  DWORD dwTextureFilterCaps;
  DWORD dwTextureBlendCaps;
  DWORD dwTextureAddressCaps;
  DWORD dwStippleWidth;
  DWORD dwStippleHeight;
};
#pragma pack(pop)

/* 476 */
typedef _D3DPrimCaps D3DPRIMCAPS;

/* 470 */
#pragma pack(push, 4)
struct _D3DDeviceDesc
{
  DWORD dwSize;
  DWORD dwFlags;
  D3DCOLORMODEL dcmColorModel;
  DWORD dwDevCaps;
  D3DTRANSFORMCAPS dtcTransformCaps;
  BOOL bClipping;
  D3DLIGHTINGCAPS dlcLightingCaps;
  D3DPRIMCAPS dpcLineCaps;
  D3DPRIMCAPS dpcTriCaps;
  DWORD dwDeviceRenderBitDepth;
  DWORD dwDeviceZBufferBitDepth;
  DWORD dwMaxBufferSize;
  DWORD dwMaxVertexCount;
  DWORD dwMinTextureWidth;
  DWORD dwMinTextureHeight;
  DWORD dwMaxTextureWidth;
  DWORD dwMaxTextureHeight;
  DWORD dwMinStippleWidth;
  DWORD dwMaxStippleWidth;
  DWORD dwMinStippleHeight;
  DWORD dwMaxStippleHeight;
  DWORD dwMaxTextureRepeat;
  DWORD dwMaxTextureAspectRatio;
  DWORD dwMaxAnisotropy;
  D3DVALUE dvGuardBandLeft;
  D3DVALUE dvGuardBandTop;
  D3DVALUE dvGuardBandRight;
  D3DVALUE dvGuardBandBottom;
  D3DVALUE dvExtentsAdjust;
  DWORD dwStencilCaps;
  DWORD dwFVFCaps;
  DWORD dwTextureOpCaps;
  WORD wMaxTextureBlendStages;
  WORD wMaxSimultaneousTextures;
};
#pragma pack(pop)

/* 490 */
struct IDirect3DViewport2
{
  IDirect3DViewport2Vtbl *lpVtbl;
};

/* 486 */
struct IDirect3DDevice2
{
  IDirect3DDevice2Vtbl *lpVtbl;
};

/* 493 */
typedef _D3DRECT D3DRECT;

/* 491 */
struct IDirect3DViewport2Vtbl
{
  int field_28;
  int field_27;
  ULONG (__stdcall *Release)(IDirect3DViewport2 *This);
  int field_25;
  int field_24;
  int field_23;
  int field_22;
  int field_21;
  void (__stdcall *SetBackground)(IDirect3DViewport2 *This, DWORD);
  int field_9;
  int field_4;
  int field_8;
  void (__stdcall *Clear)(IDirect3DViewport2 *This, DWORD count, D3DRECT *rects, DWORD flags);
  int field_10;
  int field_14;
  int field_18;
  int field_1C;
  int field_0;
};

/* 512 */
typedef _D3DCLIPSTATUS D3DCLIPSTATUS;

/* 489 */
struct IDirect3DDevice2Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirect3DDevice2 *, GUID *, IUnknown *);
  int AddRef;
  void (__stdcall *Release)(IDirect3DDevice2 *);
  HRESULT (__stdcall *GetCaps)(IDirect3DDevice2 *, LPD3DDEVICEDESC, LPD3DDEVICEDESC);
  HRESULT (__stdcall *SwapTextureHandles)(IDirect3DDevice2 *, IDirect3DTexture *, IDirect3DTexture *);
  int GetStats;
  int (__stdcall *AddViewport)(IDirect3DDevice2 *, IDirect3DViewport2 *);
  int (__stdcall *DeleteViewport)(IDirect3DDevice2 *, struct IDirect3DViewport2 *);
  int NextViewport;
  HRESULT (__stdcall *EnumTextureFormats)(IDirect3DDevice2 *, LPD3DENUMTEXTUREFORMATSCALLBACK, void *);
  HRESULT (__stdcall *BeginScene)(IDirect3DDevice2 *);
  HRESULT (__stdcall *EndScene)(IDirect3DDevice2 *);
  int GetDirect3D;
  int SetCurrentViewport;
  int GetCurrentViewport;
  int SetRenderTarget;
  HRESULT (__stdcall *GetRenderTarget)(IDirect3DDevice2 *, IDirectDrawSurface *);
  int Begin;
  int BeginIndexed;
  int Vertex;
  int Index;
  int End;
  int GetRenderState;
  HRESULT (__stdcall *SetRenderState)(IDirect3DDevice2 *, DWORD, DWORD);
  int GetLightState;
  int SetLightState;
  int SetTransform;
  int GetTransform;
  int MultiplyTransform;
  int DrawPrimitive;
  HRESULT (__stdcall *DrawIndexedPrimitive)(IDirect3DDevice2 *, DWORD, DWORD, void *, DWORD, WORD *, DWORD, DWORD);
  HRESULT (__stdcall *SetClipStatus)(IDirect3DDevice2 *, D3DCLIPSTATUS *);
  HRESULT (__stdcall *GetClipStatus)(IDirect3DDevice2 *, D3DCLIPSTATUS *);
};

/* 494 */
#pragma pack(push, 4)
struct _D3DRECT
{
  LONG x1;
  LONG y1;
  LONG x2;
  LONG y2;
};
#pragma pack(pop)

/* 508 */
struct IDirect3DTexture
{
};

/* 513 */
#pragma pack(push, 4)
struct _D3DCLIPSTATUS
{
  DWORD dwFlags;
  DWORD dwStatus;
  float minx;
  float maxx;
  float miny;
  float maxy;
  float minz;
  float maxz;
};
#pragma pack(pop)

/* 466 */
typedef _DDSURFACEDESC DDSURFACEDESC;

/* 484 */
struct gameSpecificUnk0
{
  gameSpecificUnk0 *field_27;
  int field_30;
  void *unkMeth0;
  int field_C;
  int field_10;
  int unkMeth1;
  int field_19;
  int field_1C;
  HWND hwnd;
  int field_24;
  int field_28;
  gameSpecificUnk1 *gameSpecificUnk1_instance;
  unk0 *u0;
  IID *refclsid;
  LPDIRECTDRAW lpDDraw;
  IDirectDraw2 *ddraw2;
  IDirect3D2 *d3d2;
  LPDIRECTDRAWSURFACE lpDDrawSurface2;
  LPDIRECTDRAWPALETTE lpDirectDrawPalette;
  int sizePalette;
  LPPALETTEENTRY tPaletteEntry;
  LPPALETTEENTRY lPaletteEntry;
  LPDIRECTDRAWSURFACE lpDDrawSurface1;
  LPDIRECTDRAWSURFACE lpDDSurface;
  LPDIRECT3DDEVICE2 lpD3DDevice2;
  IDirect3DViewport2 *lpD3DViewport;
  int field_5;
  int field_4;
  int field_3;
  int field_2;
  int field_1;
  int field_7C;
  int field_0;
};

/* 485 */
struct gameSpecificUnk1
{
};

/* 492 */
struct unk0
{
  int field_46;
  int field_45;
  int height0;
  int width0;
  int field_43;
  int field_42;
  int field_41;
  int field_40;
  int unk_34;
  int field_33;
  int height;
  int width;
  int field_30;
  int field_14;
  int field_18;
  int field_1C;
  int field_29;
  int field_28;
  int field_27;
  int field_26;
  LPDIRECTINPUTDEVICEA lpDIDeviceA;
  int bitDepth0;
  int field_23;
  int field_22;
  int field_20;
  int field_21;
  int field_1;
  int field_4;
  int field_8;
  int bitDepth;
  int field_10;
  int field_0;
};

/* 488 */
typedef GUID CLSID;

/* 495 */
struct __declspec(align(4)) CHK_File
{
  FILE *pfil;
  const char *szName;
};

/* 496 */
typedef _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;

/* 497 */
struct IDirectPlayLobby3A
{
  IDirectPlayLobby3AVtbl *lpVtbl;
};

/* 498 */
struct IDirectPlayLobby3AVtbl
{
  int QueryInterface;
  int AddRef;
  int (__stdcall *Release)(IDirectPlayLobby3A *);
  int Connect;
  int CreateAddress;
  int EnumAddress;
  int EnumAddressTypes;
  int EnumLocalApplications;
  int (__stdcall *GetConnectionSettings)(IDirectPlayLobby3A *, DWORD, LPVOID, LPDWORD);
  int ReceiveLobbyMessage;
  int RunApplication;
  int SendLobbyMessage;
  int (__stdcall *SetConnectionSettings)(IDirectPlayLobby3A *, DWORD, DWORD, DPLCONNECTION *);
  int SetLobbyMessageEvent;
  int CreateCompoundAddress;
  int (__stdcall *ConnectEx)(IDirectPlayLobby3A *, DWORD, IID *, LPVOID *, IUnknown *);
  int RegisterApplication;
  int UnregisterApplication;
  int WaitForConnectionSettings;
};

/* 499 */
struct DPLCONNECTION
{
  DWORD dwSize;
  DWORD dwFlags;
  tagDPSESSIONDESC2 *lpSessionDesc;
  tagDPNAME *lpPlayerName;
  GUID *guidSP;
  LPVOID lpAddress;
  DWORD dwAddressSize;
};

/* 500 */
struct tagDPSESSIONDESC2
{
  DWORD dwSize;
  DWORD dwFlags;
  GUID *guidInstance;
  GUID *guidApplication;
  DWORD dwMaxPlayers;
  DWORD dwCurrentPlayers;
  LPSTR lpszSessionName;
  LPSTR lpszPassword;
  DWORD dwReserved1;
  int dwReserved2;
  int dwUser1;
  int dwUser2;
  int dwUser3;
  int dwUser4;
};

/* 504 */
struct tagDPNAME
{
  int dwSize;
  int dwFlags;
  LPSTR lpszShortName;
  LPSTR lpszLongName;
};

/* 501 */
struct IDirectPlay4AVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectPlay4AVtbl *, IID *, void **);
  int (__stdcall *AddRef)(IDirectPlay4AVtbl *);
  int (__stdcall *Release)(IDirectPlay4A *);
  int (__stdcall *AddPlayerToGroup)(IDirectPlay4AVtbl *, DWORD, DWORD);
  int (__stdcall *Close)(IDirectPlay4AVtbl *, DWORD, DWORD);
  int (__stdcall *CreateGroup)(IDirectPlay4AVtbl *, DWORD, void *, LPVOID, DWORD, DWORD);
  int (__stdcall *CreatePlayer)(IDirectPlay4AVtbl *, LPDWORD, void *, HANDLE, LPVOID, DWORD, DWORD);
  int DeletePlayerFromGroup;
  int DestroyGroup;
  int DestroyPlayer;
  int EnumGroupPlayers;
  int EnumGroups;
  int EnumPlayers;
  int EnumSessions;
  int GetCaps;
  int GetGroupData;
  int GetGroupName;
  int GetMessageCount;
  int GetPlayerAddress;
  int GetPlayerCaps;
  int GetPlayerData;
  int GetPlayerName;
  int GetSessionDesc;
  int Initialize;
  int Open;
  int Receive;
  int SetGroupData;
  int SetGroupName;
  int SetPlayerData;
  int SetPlayerName;
  int SetSessionDesc;
  int AddGroupToGroup;
  int CreateGroupInGroup;
  int DeleteGroupFromGroup;
  int EnumConnections;
  int EnumGroupsInGroup;
  int GetGroupConnectionSettings;
  int InitializeConnection;
  int SecureOpen;
  int SendChatMessage;
  int SetGroupConnectionSettings;
  int StartSession;
  int GetGroupFlags;
  int GetGroupParent;
  int GetPlayerAccount;
  int GetPlayerFlags;
  int GetGroupOwner;
  int SetGroupOwner;
  int SendEx;
  int GetMessageQueue;
  int CancelMessage;
  int CancelPriority;
};

/* 502 */
struct IDirectPlay4A
{
  IDirectPlay4AVtbl *lpVtbl;
};

/* 503 */
struct unk1
{
  _DWORD lpDPlay4a;
  HANDLE hEvent;
  _DWORD idPlayer;
  _DWORD bSomething_dwFlags;
};

/* 505 */
struct struct_dword_10ACED34
{
  _BYTE gap0[240];
  _WORD wordF0;
  _WORD wordF2;
  _WORD wordF4;
  _DWORD handlingType;
  _DWORD transmissionType;
  _DWORD ultraCarHeader;
  _DWORD suspensionType;
};

/* 506 */
struct struct_a1
{
  _BYTE gap0[8];
  _DWORD dword8;
  _DWORD dwordC;
  _DWORD dword10;
  _BYTE gap14[4];
  _DWORD dword18;
  _DWORD dword1C;
  _BYTE gap20[28];
  _DWORD dword3C;
  _DWORD dword40;
  _BYTE gap44[8];
  unsigned __int8 *punsigned___int84C;
  _DWORD dword50;
  _DWORD dword54;
  _DWORD dword58;
  _DWORD dword5C;
  _DWORD dword60;
  _BYTE gap64[512];
  _DWORD dword264;
  _DWORD dword268;
  _DWORD dword26C;
  _BYTE gap270[8];
  _DWORD dword278;
  _BYTE gap27C[4];
  unsigned __int8 *punsigned___int8280;
  _BYTE gap284[12];
  _DWORD dword290;
  _BYTE byte294;
  _BYTE byte295;
  _BYTE byte296;
  _BYTE byte297;
  _BYTE byte298;
  _BYTE byte299;
  _BYTE byte29A;
  _BYTE byte29B;
  _DWORD dword29C;
  _DWORD dword2A0;
  _DWORD dword2A4;
  _DWORD dword2A8;
};

/* 507 */
struct struct_a1_1
{
  float float0;
  _DWORD dword4;
  _DWORD dword8;
  _DWORD dwordC;
  _DWORD dword10;
  float float14;
  _DWORD dword18;
  _DWORD dword1C;
  float float20;
  float float24;
  float float28;
  _DWORD dword2C;
  _DWORD dword30;
  _DWORD dword34;
  float float38;
  _DWORD dword3C;
};

/* 509 */
struct IDirect3DTexture2
{
  IDirect3DTexture2Vtbl *lpVtbl;
};

/* 510 */
struct IDirect3DTexture2Vtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirect3DTexture2 *, GUID *, LPVOID *);
  HRESULT (__stdcall *AddRef)(IDirect3DTexture2 *);
  HRESULT (__stdcall *Release)(IDirect3DTexture2 *);
  HRESULT (__stdcall *GetHandle)(IDirect3DTexture2 *, IDirect3DDevice2 *, D3DTEXTUREHANDLE *);
  HRESULT (__stdcall *PaletteChanged)(IDirect3DTexture2 *, DWORD, DWORD);
  HRESULT (__stdcall *Load)(IDirect3DTexture2 *, IDirect3DTexture2 *);
};

/* 511 */
struct __declspec(align(4)) unk2
{
  LPDIRECTDRAWSURFACE ddSurface;
  LPDIRECTDRAWSURFACE lpDDSurface;
  int field_6;
  D3DTEXTUREHANDLE d3dTextureHandle;
  int field_4;
  int field_8;
  int field_0;
};

/* 514 */
struct __unaligned __declspec(align(2)) struct_pMem
{
  _BYTE gap0[2];
  _WORD channels;
  _DWORD sampleRate;
  _DWORD dword8;
  _WORD wordC;
  _WORD bitDepth;
  _WORD word10;
};

